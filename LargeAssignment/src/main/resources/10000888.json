{"type":"StackOverflowArtifact","question":{"type":"StackOverflowQuestion","id":10000888,"title":"Check if char exists in java","comments":[],"tags":["java"],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","lastEditDate":"2012-04-03","score":0,"viewCount":1601,"owner":{"type":"StackOverflowUser","id":1311352,"displayName":"HaniAA","reputation":3},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000888-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"If I have a string that contains \"Cat\"\nhow could I check before hand if anything exists in each individual "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"charAt","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":" case.\nHere is the sample code"}]},"rawText":"If I have a string that contains \"Cat\"\nhow could I check before hand if anything exists in each individual charAt case.\nHere is the sample code","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"If I have a string that contains \"Cat\"\nhow could I check before hand if anything exists in each individual charAt case.\nHere is the sample code"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"exist":1,"sampl":1,"hand":1,"individu":1,"code":1,"check":1,"cat":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"charAt","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":80.33250000000002,"fleshKincaidGradeLevel":5.408333333333335,"automatedReadingIndex":5.206666666666667,"gunningFogIndex":6.881481481481481,"smogIndex":6.872983346207417,"colemanLiauIndex":6.846666666666664}]},{"type":"CodeTaggedUnit","id":"10000888-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"    "},{"type":"ForLoopStatementNode","forControl":{"type":"ForVarControlNode","variables":{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"i","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}},"comments":[]},"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}}],"comments":[]},"labels":[],"comments":[]},"condition":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"<","comments":[]},"left":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]},"right":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"array","comments":[]},{"type":"IdentifierNode","name":"length","comments":[]}],"comments":[]},"comments":[]},"update":[{"type":"PostfixOperatorExpressionNode","argument":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]},"operator":{"type":"OperatorNode","symbol":"++","comments":[]},"comments":[]}],"comments":[]},"statement":{"type":"BlockNode","statements":[{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"out","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"println","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"labels":[]},{"type":"ForLoopStatementNode","forControl":{"type":"ForVarControlNode","variables":{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"j","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}},"comments":[]},"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}}],"comments":[]},"labels":[],"comments":[]},"condition":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"<","comments":[]},"left":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"j","comments":[]}],"comments":[]},"right":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"size","comments":[]}],"comments":[]},"comments":[]},"update":[{"type":"PostfixOperatorExpressionNode","argument":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"j","comments":[]}],"comments":[]},"operator":{"type":"OperatorNode","symbol":"++","comments":[]},"comments":[]}],"comments":[]},"statement":{"type":"BlockNode","statements":[{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"out","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"print","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"+","comments":[]},"left":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":".","comments":[]},"left":{"type":"ArrayAccessSelectorNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"array","comments":[]}],"comments":[]},"dimExpression":{"type":"DimExpressionNode","argument":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"j","comments":[]}],"comments":[]},"comments":[]},"comments":[]},"right":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"charAt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},"comments":[]},"right":{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\" \""},"comments":[]},"comments":[]}],"comments":[]},"comments":[]},"labels":[]}],"labels":[],"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]},"labels":[],"comments":[]}]},"rawText":"    for (int i = 0; i < array.length; i++)\n    {\n        System.out.println();\n        for (int j = 0; j < size; j++)\n        {\n            System.out.print(array[j].charAt(i) + \" \");\n        }\n    }\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"    for (int i = 0; i < array.length; i++)\n    {\n        System.out.println();\n        for (int j = 0; j < size; j++)\n        {\n            System.out.print(array[j].charAt(i) + \" \");\n        }\n    }\n"}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"size":1,"system":2,"print":1,"println":1,"array":2,"length":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[{"type":"PrimitiveTypeNode","name":"int","comments":[]}]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"out","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"println","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"out","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"print","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"+","comments":[]},"left":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":".","comments":[]},"left":{"type":"ArrayAccessSelectorNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"array","comments":[]}],"comments":[]},"dimExpression":{"type":"DimExpressionNode","argument":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"j","comments":[]}],"comments":[]},"comments":[]},"comments":[]},"right":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"charAt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},"comments":[]},"right":{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\" \""},"comments":[]},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"charAt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"i","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}},"comments":[]},"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"j","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}},"comments":[]},"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}}]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]},{"type":"IdentifierNode","name":"i","comments":[]},{"type":"IdentifierNode","name":"array","comments":[]},{"type":"IdentifierNode","name":"length","comments":[]},{"type":"IdentifierNode","name":"i","comments":[]},{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"out","comments":[]},{"type":"IdentifierNode","name":"println","comments":[]},{"type":"IdentifierNode","name":"j","comments":[]},{"type":"IdentifierNode","name":"j","comments":[]},{"type":"IdentifierNode","name":"size","comments":[]},{"type":"IdentifierNode","name":"j","comments":[]},{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"out","comments":[]},{"type":"IdentifierNode","name":"print","comments":[]},{"type":"IdentifierNode","name":"array","comments":[]},{"type":"IdentifierNode","name":"j","comments":[]},{"type":"IdentifierNode","name":"charAt","comments":[]},{"type":"IdentifierNode","name":"i","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]}]},{"type":"NaturalLanguageTaggedUnit","id":"10000888-u2","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Once i reaches 3 you would get an out of bounds exception. Is there a way that it could print an empty space? "}]},"rawText":"Once i reaches 3 you would get an out of bounds exception. Is there a way that it could print an empty space? ","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Once i reaches 3 you would get an out of bounds exception. Is there a way that it could print an empty space? "}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"reach":1,"print":1,"bound":1,"space":1,"empti":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":92.17119565217395,"fleshKincaidGradeLevel":3.2602173913043515,"automatedReadingIndex":1.7265217391304333,"gunningFogIndex":4.6000000000000005,"smogIndex":3.0,"colemanLiauIndex":3.3586956521739104}]},{"type":"NaturalLanguageTaggedUnit","id":"10000888-u3","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"EDIT: Sorry I wasn't clear at all. There are multiple strings that are being printed vertically. So assume the largest string is size of 10 and that the smallest is size of 4. The first four char of each string print fine. But an out of bounds error occurs when the fifth char tries to print since it doesn't exist. Is there any way around that?"}]},"rawText":"EDIT: Sorry I wasn't clear at all. There are multiple strings that are being printed vertically. So assume the largest string is size of 10 and that the smallest is size of 4. The first four char of each string print fine. But an out of bounds error occurs when the fifth char tries to print since it doesn't exist. Is there any way around that?","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"EDIT: Sorry I wasn't clear at all. There are multiple strings that are being printed vertically. So assume the largest string is size of 10 and that the smallest is size of 4. The first four char of each string print fine. But an out of bounds error occurs when the fifth char tries to print since it doesn't exist. Is there any way around that?"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"assum":1,"size":2,"smallest":1,"exist":1,"clear":1,"occur":1,"print":3,"wasn":1,"string":1,"vertic":1,"edit":1,"bound":1,"largest":1,"error":1,"fine":1,"multipl":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":92.06990196078434,"fleshKincaidGradeLevel":3.2329411764705895,"automatedReadingIndex":3.145931372549022,"gunningFogIndex":5.121568627450981,"smogIndex":5.23606797749979,"colemanLiauIndex":5.199558823529408}]}]},"answers":[{"type":"StackOverflowAnswer","id":10000904,"questionId":10000888,"comments":[{"type":"StackOverflowComment","id":12784834,"postId":10000904,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":1311352,"displayName":"HaniAA","reputation":3},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000904-c12784834-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Thank you good sir. I was thinking way to hard into this."}]},"rawText":"Thank you good sir. I was thinking way to hard into this.","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"Thank you good sir. I was thinking way to hard into this."}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"hard":1,"think":1,"sir":1,"good":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":94.995,"fleshKincaidGradeLevel":1.5,"automatedReadingIndex":-1.1600000000000001,"gunningFogIndex":2.4000000000000004,"smogIndex":3.0,"colemanLiauIndex":0.7966666666666633}]}]},{"type":"StackOverflowComment","id":12784364,"postId":10000904,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":1311352,"displayName":"HaniAA","reputation":3},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000904-c12784364-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Size hold the value of the largest string."}]},"rawText":"Size hold the value of the largest string.","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"Size hold the value of the largest string."}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"largest":1,"size":1,"hold":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":103.54,"fleshKincaidGradeLevel":0.8049999999999997,"automatedReadingIndex":2.5874999999999986,"gunningFogIndex":3.2,"smogIndex":3.0,"colemanLiauIndex":5.482499999999998}]}]},{"type":"StackOverflowComment","id":12783675,"postId":10000904,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":288915,"displayName":"kevingreen","reputation":823},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000904-c12783675-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"AnnotationNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"GregHewgill","comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":" Yup, you are correct. For some reason I saw that as <=size. I think that's just my own tendencies for coding that way coming out."}]},"rawText":"@GregHewgill Yup, you are correct. For some reason I saw that as <=size. I think that's just my own tendencies for coding that way coming out.","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"@GregHewgill Yup, you are correct. For some reason I saw that as <=size. I think that's just my own tendencies for coding that way coming out."}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"greg":1,"size":1,"correct":1,"come":1,"yup":1,"reason":1,"code":1,"tendenc":1,"hewgil":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"GregHewgill","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":91.1666666666667,"fleshKincaidGradeLevel":2.7792592592592626,"automatedReadingIndex":2.43333333333333,"gunningFogIndex":3.6,"smogIndex":3.0,"colemanLiauIndex":5.08111111111111}]}]},{"type":"StackOverflowComment","id":12783650,"postId":10000904,"creationDate":"2012-04-03","score":3,"isEdited":false,"owner":{"type":"StackOverflowUser","id":893,"displayName":"Greg Hewgill","reputation":430645},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000904-c12783650-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"@kevingreen: well, since the test is `j < size`, then `size` should be just `array[i].length`."}]},"rawText":"@kevingreen: well, since the test is `j < size`, then `size` should be just `array[i].length`.","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"@kevingreen: well, since the test is `j < size`, then `size` should be just `array[i].length`."}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"test":1,"size":2,"array":1,"kevingreen":1,"length":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":92.965,"fleshKincaidGradeLevel":2.280000000000001,"automatedReadingIndex":1.9987500000000011,"gunningFogIndex":3.2,"smogIndex":3.0,"colemanLiauIndex":4.746249999999996}]}]},{"type":"StackOverflowComment","id":12783610,"postId":10000904,"creationDate":"2012-04-03","score":1,"isEdited":false,"owner":{"type":"StackOverflowUser","id":288915,"displayName":"kevingreen","reputation":823},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000904-c12783610-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Also, I think size needs to be set to the array[i].length-1."}]},"rawText":"Also, I think size needs to be set to the array[i].length-1.","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"Also, I think size needs to be set to the array[i].length-1."}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"set":1,"length":1,"size":1,"array":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":102.6221153846154,"fleshKincaidGradeLevel":0.560384615384617,"automatedReadingIndex":-1.8761538461538443,"gunningFogIndex":2.6,"smogIndex":3.0,"colemanLiauIndex":-0.026923076923077716}]}]}],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","lastEditDate":"2012-04-03","score":7,"isAccepted":true,"owner":{"type":"StackOverflowUser","id":574479,"displayName":"biziclop","reputation":27118},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000904-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"You've got i and j the wrong way around, that's all."}]},"rawText":"You've got i and j the wrong way around, that's all.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"You've got "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"i"}]},{"type":"XmlTextNode","contents":" and "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"j"}]},{"type":"XmlTextNode","contents":" the wrong way around, that's all."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"wrong":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":109.04000000000002,"fleshKincaidGradeLevel":1.2800000000000011,"automatedReadingIndex":-0.43769230769230916,"gunningFogIndex":5.2,"smogIndex":3.0,"colemanLiauIndex":0.01538461538461533}]},{"type":"NaturalLanguageTaggedUnit","id":"10000904-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"You should have:"}]},"rawText":"You should have:","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"You should have:"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":119.19000000000003,"fleshKincaidGradeLevel":-2.619999999999999,"automatedReadingIndex":0.4800000000000004,"gunningFogIndex":1.2000000000000002,"smogIndex":3.0,"colemanLiauIndex":-0.27666666666667084}]},{"type":"CodeTaggedUnit","id":"10000904-u2","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"out","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"print","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"+","comments":[]},"left":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":".","comments":[]},"left":{"type":"ArrayAccessSelectorNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"array","comments":[]}],"comments":[]},"dimExpression":{"type":"DimExpressionNode","argument":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]},"comments":[]},"comments":[]},"right":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"charAt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"j","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},"comments":[]},"right":{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\" \""},"comments":[]},"comments":[]}],"comments":[]},"comments":[]},"labels":[]}]},"rawText":"System.out.print(array[i].charAt(j) + \" \");\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"System.out.print(array[i].charAt(j) + \" \");\n"}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"array":1,"print":1,"system":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"out","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"print","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"+","comments":[]},"left":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":".","comments":[]},"left":{"type":"ArrayAccessSelectorNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"array","comments":[]}],"comments":[]},"dimExpression":{"type":"DimExpressionNode","argument":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]},"comments":[]},"comments":[]},"right":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"charAt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"j","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},"comments":[]},"right":{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\" \""},"comments":[]},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"charAt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"j","comments":[]}],"comments":[]}],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"out","comments":[]},{"type":"IdentifierNode","name":"print","comments":[]},{"type":"IdentifierNode","name":"array","comments":[]},{"type":"IdentifierNode","name":"i","comments":[]},{"type":"IdentifierNode","name":"charAt","comments":[]},{"type":"IdentifierNode","name":"j","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]}]},{"type":"NaturalLanguageTaggedUnit","id":"10000904-u3","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"And to make your code more robust, you should rewrite the inner loop to go until it reaches the length of array[i], instead of a pre-defined size variable."}]},"rawText":"And to make your code more robust, you should rewrite the inner loop to go until it reaches the length of array[i], instead of a pre-defined size variable.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"And to make your code more robust, you should rewrite the inner loop to go until it reaches the length of "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"array[i]"}]},{"type":"XmlTextNode","contents":", instead of a pre-defined "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"size"}]},{"type":"XmlTextNode","contents":" variable."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"pre":1,"reach":1,"loop":1,"size":1,"code":1,"array":1,"robust":1,"make":1,"length":1,"defin":1,"rewrit":1,"variabl":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":60.71034482758621,"fleshKincaidGradeLevel":11.995862068965518,"automatedReadingIndex":13.046896551724139,"gunningFogIndex":11.600000000000001,"smogIndex":3.0,"colemanLiauIndex":8.14724137931034}]},{"type":"NaturalLanguageTaggedUnit","id":"10000904-u4","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Update: If you want to print the array of strings vertically (so each string is in a column), this is what your code should look like:"}]},"rawText":"Update: If you want to print the array of strings vertically (so each string is in a column), this is what your code should look like:","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"strong"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Update:"}]},{"type":"XmlTextNode","contents":" If you want to print the array of strings vertically (so each string is in a column), this is what your code should look like:"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"print":1,"updat":1,"string":1,"vertic":1,"code":1,"array":1,"column":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":69.8142307692308,"fleshKincaidGradeLevel":9.98076923076923,"automatedReadingIndex":10.41,"gunningFogIndex":11.938461538461539,"smogIndex":8.477225575051662,"colemanLiauIndex":6.606153846153845}]},{"type":"CodeTaggedUnit","id":"10000904-u5","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"ForLoopStatementNode","forControl":{"type":"ForVarControlNode","variables":{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"i","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}},"comments":[]},"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}}],"comments":[]},"labels":[],"comments":[]},"condition":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"<","comments":[]},"left":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]},"right":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"size","comments":[]}],"comments":[]},"comments":[]},"update":[{"type":"PostfixOperatorExpressionNode","argument":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]},"operator":{"type":"OperatorNode","symbol":"++","comments":[]},"comments":[]}],"comments":[]},"statement":{"type":"BlockNode","statements":[{"type":"ForLoopStatementNode","forControl":{"type":"ForVarControlNode","variables":{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"j","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}},"comments":[]},"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}}],"comments":[]},"labels":[],"comments":[]},"condition":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"<","comments":[]},"left":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"j","comments":[]}],"comments":[]},"right":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"array","comments":[]},{"type":"IdentifierNode","name":"length","comments":[]}],"comments":[]},"comments":[]},"update":[{"type":"PostfixOperatorExpressionNode","argument":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"j","comments":[]}],"comments":[]},"operator":{"type":"OperatorNode","symbol":"++","comments":[]},"comments":[]}],"comments":[]},"statement":{"type":"BlockNode","statements":[{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"c","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"CharacterLiteralNode","valueRep":"' '"},"comments":[]}},"comments":[]},"varType":{"type":"PrimitiveTypeNode","name":"char","comments":[]}}],"comments":[]},"labels":[],"comments":[{"text":"// print out a space character by default to keep the columns aligned\n"}]},{"type":"IfStatementNode","expression":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":">","comments":[]},"left":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":".","comments":[]},"left":{"type":"ArrayAccessSelectorNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"array","comments":[]}],"comments":[]},"dimExpression":{"type":"DimExpressionNode","argument":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"j","comments":[]}],"comments":[]},"comments":[]},"comments":[]},"right":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"length","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"comments":[]},"right":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]},"comments":[{"text":"// but if the array[j] still has characters left\n"}]},"statement":{"type":"ExpressionStatement","expression":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"=","comments":[]},"left":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"c","comments":[]}],"comments":[]},"right":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":".","comments":[]},"left":{"type":"ArrayAccessSelectorNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"array","comments":[]}],"comments":[]},"dimExpression":{"type":"DimExpressionNode","argument":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"j","comments":[]}],"comments":[]},"comments":[]},"comments":[]},"right":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"charAt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},"comments":[]},"comments":[{"text":"// print that character instead\n"}]},"labels":[]},"labels":[],"comments":[]},{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"out","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"print","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"+","comments":[]},"left":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"c","comments":[]}],"comments":[]},"right":{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\" \""},"comments":[]},"comments":[]}],"comments":[]},"comments":[{"text":"// here\n"}]},"labels":[]}],"labels":[],"comments":[]},"labels":[],"comments":[{"text":"// for every string in the array\n"}]},{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"out","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"println","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[{"text":"// and close the line\n"}]},"labels":[]}],"labels":[],"comments":[]},"labels":[],"comments":[{"text":"// i is the loop variable for the character count, we'll print one line for each character\n"}]}]},"rawText":"for (int i = 0; i < size; i++)             // i is the loop variable for the character count, we'll print one line for each character\n{\n    for (int j = 0; j < array.length; j++) // for every string in the array\n    {\n        char c = ' ';                      // print out a space character by default to keep the columns aligned\n        if ( array[j].length() > i )       // but if the array[j] still has characters left\n            c = array[j].charAt(i);        // print that character instead\n        System.out.print(c + \" \");         // here\n    }\n    System.out.println();                  // and close the line\n}\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"for (int i = 0; i < size; i++)             // i is the loop variable for the character count, we'll print one line for each character\n{\n    for (int j = 0; j < array.length; j++) // for every string in the array\n    {\n        char c = ' ';                      // print out a space character by default to keep the columns aligned\n        if ( array[j].length() > i )       // but if the array[j] still has characters left\n            c = array[j].charAt(i);        // print that character instead\n        System.out.print(c + \" \");         // here\n    }\n    System.out.println();                  // and close the line\n}\n"}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"count":1,"charact":5,"loop":1,"size":1,"system":2,"line":2,"align":1,"print":4,"left":1,"println":1,"array":5,"space":1,"column":1,"length":2,"variabl":1,"close":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[{"type":"PrimitiveTypeNode","name":"int","comments":[]},{"type":"PrimitiveTypeNode","name":"char","comments":[]}]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"length","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"charAt","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"out","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"print","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"+","comments":[]},"left":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"c","comments":[]}],"comments":[]},"right":{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\" \""},"comments":[]},"comments":[]}],"comments":[]},"comments":[{"text":"// here\n"}]},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"out","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"println","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[{"text":"// and close the line\n"}]}]},{"type":"CodeVariablesMetaInformation","variables":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"i","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}},"comments":[]},"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"j","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}},"comments":[]},"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"c","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"CharacterLiteralNode","valueRep":"' '"},"comments":[]}},"comments":[]},"varType":{"type":"PrimitiveTypeNode","name":"char","comments":[]}}]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]},{"type":"IdentifierNode","name":"i","comments":[]},{"type":"IdentifierNode","name":"size","comments":[]},{"type":"IdentifierNode","name":"i","comments":[]},{"type":"IdentifierNode","name":"j","comments":[]},{"type":"IdentifierNode","name":"j","comments":[]},{"type":"IdentifierNode","name":"array","comments":[]},{"type":"IdentifierNode","name":"length","comments":[]},{"type":"IdentifierNode","name":"j","comments":[]},{"type":"IdentifierNode","name":"c","comments":[]},{"type":"IdentifierNode","name":"array","comments":[]},{"type":"IdentifierNode","name":"j","comments":[]},{"type":"IdentifierNode","name":"length","comments":[]},{"type":"IdentifierNode","name":"i","comments":[]},{"type":"IdentifierNode","name":"c","comments":[]},{"type":"IdentifierNode","name":"array","comments":[]},{"type":"IdentifierNode","name":"j","comments":[]},{"type":"IdentifierNode","name":"charAt","comments":[]},{"type":"IdentifierNode","name":"i","comments":[]},{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"out","comments":[]},{"type":"IdentifierNode","name":"print","comments":[]},{"type":"IdentifierNode","name":"c","comments":[]},{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"out","comments":[]},{"type":"IdentifierNode","name":"println","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]}]}]},{"type":"StackOverflowAnswer","id":10001165,"questionId":10000888,"comments":[],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","score":1,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":384706,"displayName":"Cratylus","reputation":24193},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001165-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"how could I check before hand if anything exists in each individual\n  "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"charAt","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":" case.  "}]},"rawText":"how could I check before hand if anything exists in each individual\n  charAt case.  ","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"blockquote"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"how could I check before hand if anything exists in each individual\n  charAt case.  "}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"individu":1,"exist":1,"hand":1,"check":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"charAt","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":65.72500000000001,"fleshKincaidGradeLevel":7.570000000000004,"automatedReadingIndex":7.774285714285714,"gunningFogIndex":8.457142857142857,"smogIndex":8.477225575051662,"colemanLiauIndex":9.824285714285711}]},{"type":"NaturalLanguageTaggedUnit","id":"10001165-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Besides the indexing issue already mentioned by biziclop, you must also check the size of the string before you do a "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"charAt","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":".\nI mean for ("},{"type":"BlockNode","statements":[{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"j","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}},"comments":[]},"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}}],"comments":[]},"labels":[],"comments":[]},{"type":"ExpressionStatement","expression":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"<","comments":[]},"left":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"j","comments":[]}],"comments":[]},"right":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"size","comments":[]}],"comments":[]},"comments":[]},"labels":[]}],"labels":[],"comments":[]},{"type":"TextFragmentNode","text":"j++) here size should be array[j]."},{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"length","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"labels":[]},{"type":"TextFragmentNode","text":"for this to work.  "}]},"rawText":"Besides the indexing issue already mentioned by biziclop, you must also check the size of the string before you do a charAt.\nI mean for (int j = 0; j < size; j++) here size should be array[j].length() for this to work.  ","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Besides the indexing issue already mentioned by biziclop, you must also check the size of the string before you do a "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"charAt"}]},{"type":"XmlTextNode","contents":"."},{"type":"XmlSingleNode","name":{"type":"XmlNameNode","value":"br"},"attributes":[]},{"type":"XmlTextNode","contents":"\nI mean "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"for (int j = 0; j < size; j++)"}]},{"type":"XmlTextNode","contents":" here "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"size"}]},{"type":"XmlTextNode","contents":" should be "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"array[j].length()"}]},{"type":"XmlTextNode","contents":" for this to work.  "}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"size":3,"issu":1,"biziclop":1,"work":1,"array":1,"mention":1,"check":1,"length":1,"index":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[{"type":"PrimitiveTypeNode","name":"int","comments":[]}]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"length","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"j","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}},"comments":[]},"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}}]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"charAt","comments":[]},{"type":"IdentifierNode","name":"j","comments":[]},{"type":"IdentifierNode","name":"j","comments":[]},{"type":"IdentifierNode","name":"size","comments":[]},{"type":"IdentifierNode","name":"length","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":85.86785714285716,"fleshKincaidGradeLevel":4.76047619047619,"automatedReadingIndex":3.625,"gunningFogIndex":5.6000000000000005,"smogIndex":3.0,"colemanLiauIndex":4.63547619047619}]},{"type":"NaturalLanguageTaggedUnit","id":"10001165-u2","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"But why bother with a loop iteration?\nYou can do just "},{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"out","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"print","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"+","comments":[]},"left":{"type":"ArrayAccessSelectorNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"array","comments":[]}],"comments":[]},"dimExpression":{"type":"DimExpressionNode","argument":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]},"comments":[]},"comments":[]},"right":{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\" \""},"comments":[]},"comments":[]}],"comments":[]},"comments":[]},"labels":[]}]},"rawText":"But why bother with a loop iteration?\nYou can do just System.out.print(array[i] + \" \");","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"But why bother with a loop iteration?"},{"type":"XmlSingleNode","name":{"type":"XmlNameNode","value":"br"},"attributes":[]},{"type":"XmlTextNode","contents":"\nYou can do just "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"System.out.print(array[i] + \" \");"}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"loop":1,"system":1,"print":1,"bother":1,"array":1,"iter":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"out","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"print","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"+","comments":[]},"left":{"type":"ArrayAccessSelectorNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"array","comments":[]}],"comments":[]},"dimExpression":{"type":"DimExpressionNode","argument":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]},"comments":[]},"comments":[]},"right":{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\" \""},"comments":[]},"comments":[]}],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"System","comments":[]},{"type":"IdentifierNode","name":"out","comments":[]},{"type":"IdentifierNode","name":"print","comments":[]},{"type":"IdentifierNode","name":"array","comments":[]},{"type":"IdentifierNode","name":"i","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":66.7871428571429,"fleshKincaidGradeLevel":5.682857142857145,"automatedReadingIndex":3.6014285714285705,"gunningFogIndex":8.514285714285714,"smogIndex":8.477225575051662,"colemanLiauIndex":6.84}]}]}]}