{"type":"StackOverflowArtifact","question":{"type":"StackOverflowQuestion","id":10000578,"title":"Interfaces: profit of using","comments":[{"type":"StackOverflowComment","id":12783171,"postId":10000578,"creationDate":"2012-04-03","score":1,"isEdited":false,"owner":{"type":"StackOverflowUser","id":74015,"displayName":"Sam Axe","reputation":16549},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000578-c12783171-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"I think this question seems better suited to programmers.stackexchange.com"}]},"rawText":"I think this question seems better suited to programmers.stackexchange.com","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"I think this question seems better suited to programmers.stackexchange.com"}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"question":1,"stackexchang":1,"suit":1,"programm":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":19.100000000000023,"fleshKincaidGradeLevel":12.831111111111113,"automatedReadingIndex":17.61,"gunningFogIndex":8.044444444444444,"smogIndex":8.477225575051662,"colemanLiauIndex":24.05999999999999}]}]}],"tags":["java","php","interface"],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","score":0,"viewCount":106,"owner":{"type":"StackOverflowUser","id":618020,"displayName":"Zapadlo","reputation":1066},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000578-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"First of all, my ubiquitous language is PHP, and I'm thinking about learning Java."}]},"rawText":"First of all, my ubiquitous language is PHP, and I'm thinking about learning Java.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"First of all, my ubiquitous language is PHP, and I'm thinking about learning Java."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"languag":1,"learn":1,"ubiquit":1,"think":1,"php":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":67.53000000000003,"fleshKincaidGradeLevel":7.566666666666666,"automatedReadingIndex":6.7940000000000005,"gunningFogIndex":8.666666666666668,"smogIndex":8.477225575051662,"colemanLiauIndex":8.115999999999996}]},{"type":"NaturalLanguageTaggedUnit","id":"10000578-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"So let me split my question on two closely related parts."}]},"rawText":"So let me split my question on two closely related parts.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"So let me split my question on two closely related parts."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"question":1,"relat":1,"split":1,"part":1,"close":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":64.9245454545455,"fleshKincaidGradeLevel":6.936363636363637,"automatedReadingIndex":3.7663636363636357,"gunningFogIndex":4.4,"smogIndex":3.0,"colemanLiauIndex":6.103636363636362}]},{"type":"NaturalLanguageTaggedUnit","id":"10000578-u2","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Here goes the first part."}]},"rawText":"Here goes the first part.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Here goes the first part."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"part":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":117.16000000000003,"fleshKincaidGradeLevel":-1.8399999999999999,"automatedReadingIndex":-0.08999999999999986,"gunningFogIndex":2.0,"smogIndex":3.0,"colemanLiauIndex":1.759999999999998}]},{"type":"NaturalLanguageTaggedUnit","id":"10000578-u3","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Say I have a domain-model class. It has some getters, setters, some query methods etc. And one day I want to have a possibility to compare them. So it looks like:"}]},"rawText":"Say I have a domain-model class. It has some getters, setters, some query methods etc. And one day I want to have a possibility to compare them. So it looks like:","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Say I have a domain-model class. It has some getters, setters, some query methods etc. And one day I want to have a possibility to compare them. So it looks like:"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"method":1,"model":1,"domain":1,"setter":1,"possibl":1,"getter":1,"queri":1,"compar":1,"day":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":84.34939516129033,"fleshKincaidGradeLevel":3.419596774193547,"automatedReadingIndex":1.7408064516129045,"gunningFogIndex":5.680645161290323,"smogIndex":6.872983346207417,"colemanLiauIndex":4.459032258064514}]},{"type":"CodeTaggedUnit","id":"10000578-u4","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"ClassDeclarationNode","modifiers":[],"identifier":{"type":"IdentifierNode","name":"MyEntity","comments":[]},"superTypes":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"AbstractEntity","comments":[]},"comments":[]}],"comments":[]},"body":{"type":"ClassBodyNode","declarations":[{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]}],"returnType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"function","comments":[]},"comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"getId","comments":[]},"parameters":{"type":"FormalParametersNode","comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[],"labels":[],"comments":[{"text":"// get id property\n"}]},"comments":[]},{"type":"TextFragmentNode","text":"public function setId($id)\n    "},{"type":"BlockDeclarationNode","modifiers":[],"block":{"type":"BlockNode","statements":[],"labels":[],"comments":[{"text":"// set id property\n"},{"text":"// plenty of other methods that set or retrieve data\n"}]}},{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]}],"returnType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"function","comments":[]},"comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"compareTo","comments":[]},"parameters":{"type":"FormalParametersNode","parameters":{"type":"FormalParameterDeclsNode","formalParameters":[{"type":"FormalParameterDeclNode","modifiers":[],"parameterType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"MyEntity","comments":[]},"comments":[]}],"comments":[]},"variableDeclarator":{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"$anotherEntity","comments":[]},"arrayDepth":[]},"isVariadic":false,"comments":[]}],"comments":[]},"comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[],"labels":[],"comments":[{"text":"// some compare logic\n"}]},"comments":[]}],"comments":[]},"labels":[],"comments":[]}]},"rawText":"class MyEntity extends AbstractEntity\n{\n    public function getId()\n    {\n        // get id property\n    }\n\n    public function setId($id)\n    {\n        // set id property\n    }\n\n    // plenty of other methods that set or retrieve data\n\n    public function compareTo(MyEntity $anotherEntity)\n    {\n        // some compare logic\n    }\n}\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"class MyEntity extends AbstractEntity\n{\n    public function getId()\n    {\n        // get id property\n    }\n\n    public function setId($id)\n    {\n        // set id property\n    }\n\n    // plenty of other methods that set or retrieve data\n\n    public function compareTo(MyEntity $anotherEntity)\n    {\n        // some compare logic\n    }\n}\n"}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"properti":2,"method":1,"retriev":1,"data":1,"set":3,"logic":1,"compar":2,"function":3,"entiti":4,"plenti":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"AbstractEntity","comments":[]},"comments":[]}],"comments":[]},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"function","comments":[]},"comments":[]}],"comments":[]},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"MyEntity","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"$anotherEntity","comments":[]},"arrayDepth":[]}]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"MyEntity","comments":[]},{"type":"IdentifierNode","name":"AbstractEntity","comments":[]},{"type":"IdentifierNode","name":"function","comments":[]},{"type":"IdentifierNode","name":"getId","comments":[]},{"type":"IdentifierNode","name":"function","comments":[]},{"type":"IdentifierNode","name":"compareTo","comments":[]},{"type":"IdentifierNode","name":"MyEntity","comments":[]},{"type":"IdentifierNode","name":"$anotherEntity","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]}],"returnType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"function","comments":[]},"comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"getId","comments":[]},"parameters":{"type":"FormalParametersNode","comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[],"labels":[],"comments":[{"text":"// get id property\n"}]},"comments":[]},{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]}],"returnType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"function","comments":[]},"comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"compareTo","comments":[]},"parameters":{"type":"FormalParametersNode","parameters":{"type":"FormalParameterDeclsNode","formalParameters":[{"type":"FormalParameterDeclNode","modifiers":[],"parameterType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"MyEntity","comments":[]},"comments":[]}],"comments":[]},"variableDeclarator":{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"$anotherEntity","comments":[]},"arrayDepth":[]},"isVariadic":false,"comments":[]}],"comments":[]},"comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[],"labels":[],"comments":[{"text":"// some compare logic\n"}]},"comments":[]}]}]},{"type":"NaturalLanguageTaggedUnit","id":"10000578-u5","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"If it would have been Java, I should have implemented a Comparable interface. But why? Polymorphism? Readbility? Or something else? And if it was PHP -- should I create Comparable interface for myself? "}]},"rawText":"If it would have been Java, I should have implemented a Comparable interface. But why? Polymorphism? Readbility? Or something else? And if it was PHP -- should I create Comparable interface for myself? ","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"If it would have been Java, I should have implemented a "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Comparable"}]},{"type":"XmlTextNode","contents":" interface. But why? Polymorphism? Readbility? Or something else? And if it was PHP -- should I create "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Comparable"}]},{"type":"XmlTextNode","contents":" interface for myself? "}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"readbl":1,"compar":2,"php":1,"implement":1,"polymorph":1,"creat":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":58.65916666666669,"fleshKincaidGradeLevel":6.4025,"automatedReadingIndex":4.786666666666669,"gunningFogIndex":7.133333333333333,"smogIndex":7.47213595499958,"colemanLiauIndex":8.024999999999999}]},{"type":"NaturalLanguageTaggedUnit","id":"10000578-u6","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"So here goes the second part."}]},"rawText":"So here goes the second part.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"So here goes the second part."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"part":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":102.04500000000002,"fleshKincaidGradeLevel":0.5166666666666693,"automatedReadingIndex":-0.375,"gunningFogIndex":2.4000000000000004,"smogIndex":3.0,"colemanLiauIndex":1.7783333333333324}]},{"type":"NaturalLanguageTaggedUnit","id":"10000578-u7","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"My colleague told me that it is a rule of thumb in Java to create an interface for every behavioral aspect of the class. For example, if I wanted to present this object as a string, I should state this behaviour by something like implements Stringable, where in case of PHP Stringable would look like:"}]},"rawText":"My colleague told me that it is a rule of thumb in Java to create an interface for every behavioral aspect of the class. For example, if I wanted to present this object as a string, I should state this behaviour by something like implements Stringable, where in case of PHP Stringable would look like:","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"My colleague told me that it is a rule of thumb in Java to create an interface for every behavioral aspect of the class. For example, if I wanted to present this object as a string, I should state this behaviour by something like "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"implements Stringable"}]},{"type":"XmlTextNode","contents":", where in case of PHP "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Stringable"}]},{"type":"XmlTextNode","contents":" would look like:"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"want":1,"state":1,"thumb":1,"present":1,"aspect":1,"rule":1,"told":1,"stringabl":2,"object":1,"colleagu":1,"php":1,"behaviour":1,"behavior":1,"creat":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":63.558863636363654,"fleshKincaidGradeLevel":11.225909090909088,"automatedReadingIndex":13.044000000000004,"gunningFogIndex":11.0,"smogIndex":3.0,"colemanLiauIndex":9.025090909090906}]},{"type":"CodeTaggedUnit","id":"10000578-u8","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"InterfaceDeclarationNode","modifiers":[],"identifier":{"type":"IdentifierNode","name":"Stringable","comments":[]},"body":{"type":"ClassBodyNode","declarations":[{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]}],"returnType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"function","comments":[]},"comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"__toString","comments":[]},"parameters":{"type":"FormalParametersNode","comments":[]},"arrayReturnType":[],"comments":[]}],"comments":[]},"labels":[],"comments":[]}]},"rawText":"interface Stringable\n{\n    public function __toString();\n}\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"interface Stringable\n{\n    public function __toString();\n}\n"}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"function":1,"stringabl":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"function","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"Stringable","comments":[]},{"type":"IdentifierNode","name":"function","comments":[]},{"type":"IdentifierNode","name":"__toString","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]}],"returnType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"function","comments":[]},"comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"__toString","comments":[]},"parameters":{"type":"FormalParametersNode","comments":[]},"arrayReturnType":[],"comments":[]}]}]},{"type":"NaturalLanguageTaggedUnit","id":"10000578-u9","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Is that really a rule of thumb? What benefits are gained with this approach? And does it worth it in PHP? And in Java?"}]},"rawText":"Is that really a rule of thumb? What benefits are gained with this approach? And does it worth it in PHP? And in Java?","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Is that really a rule of thumb? What benefits are gained with this approach? And does it worth it in PHP? And in Java?"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"thumb":1,"rule":1,"gain":1,"worth":1,"php":1,"approach":1,"benefit":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":94.995,"fleshKincaidGradeLevel":1.5,"automatedReadingIndex":-0.5712499999999991,"gunningFogIndex":2.4000000000000004,"smogIndex":3.0,"colemanLiauIndex":1.5329166666666652}]}]},"answers":[{"type":"StackOverflowAnswer","id":10000623,"questionId":10000578,"comments":[],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","score":6,"isAccepted":true,"owner":{"type":"StackOverflowUser","id":22656,"displayName":"Jon Skeet","reputation":799764},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000623-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"If it would have been Java, I should have implemented a Comparable interface. But why? "}]},"rawText":"If it would have been Java, I should have implemented a Comparable interface. But why? ","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"blockquote"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"If it would have been Java, I should have implemented a Comparable interface. But why? "}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"compar":1,"implement":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":63.86250000000001,"fleshKincaidGradeLevel":6.215000000000003,"automatedReadingIndex":3.985999999999997,"gunningFogIndex":8.333333333333334,"smogIndex":8.477225575051662,"colemanLiauIndex":7.293999999999997}]},{"type":"NaturalLanguageTaggedUnit","id":"10000623-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Well, you're already providing a way of comparing \"this\" with another instance... if you implement Comparable, you're telling the rest of the system that you support that ability, so that the comparison can be using for sorting, finding the \"maximum\" or \"minimum\" value etc... all in routines which know nothing about your type."}]},"rawText":"Well, you're already providing a way of comparing \"this\" with another instance... if you implement Comparable, you're telling the rest of the system that you support that ability, so that the comparison can be using for sorting, finding the \"maximum\" or \"minimum\" value etc... all in routines which know nothing about your type.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Well, you're already providing a way of comparing \"this\" with another instance... if you implement "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Comparable"}]},{"type":"XmlTextNode","contents":", you're telling the rest of the system that you support that ability, so that the comparison can be using for sorting, finding the \"maximum\" or \"minimum\" value etc... all in routines which know nothing about your type."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"find":1,"support":1,"provid":1,"system":1,"comparison":1,"rest":1,"maximum":1,"routin":1,"compar":2,"implement":1,"abil":1,"minimum":1,"sort":1,"type":1,"tell":1,"instanc":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":38.947954545454564,"fleshKincaidGradeLevel":14.658636363636365,"automatedReadingIndex":14.585454545454546,"gunningFogIndex":13.181818181818182,"smogIndex":9.70820393249937,"colemanLiauIndex":10.95272727272727}]},{"type":"NaturalLanguageTaggedUnit","id":"10000623-u2","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"My colleague told me that it is a rule of thumb in Java to create an interface for every behavioral aspect of the class."}]},"rawText":"My colleague told me that it is a rule of thumb in Java to create an interface for every behavioral aspect of the class.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"blockquote"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"My colleague told me that it is a rule of thumb in Java to create an interface for every behavioral aspect of the class."}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"thumb":1,"aspect":1,"rule":1,"told":1,"colleagu":1,"behavior":1,"creat":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":66.15000000000003,"fleshKincaidGradeLevel":9.995000000000001,"automatedReadingIndex":9.41,"gunningFogIndex":9.600000000000001,"smogIndex":3.0,"colemanLiauIndex":6.509999999999998}]},{"type":"NaturalLanguageTaggedUnit","id":"10000623-u3","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"That sounds somewhat overboard to me. (Your example isn't a good one as there's already "},{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"toString","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"labels":[]},{"type":"TextFragmentNode","text":"on Object.) Don't randomly create interfaces for no purpose - but create them if you want that behaviour to be used by code which doesn't need know about your concrete type, only about what it supports. A good example of this is testability - if you write an \"authenticator\" class, then you can imagine either swapping different authenticators in your production code or mocking/faking the authenticator when you're testing other components which use authentication."}]},"rawText":"That sounds somewhat overboard to me. (Your example isn't a good one as there's already toString() on Object.) Don't randomly create interfaces for no purpose - but create them if you want that behaviour to be used by code which doesn't need know about your concrete type, only about what it supports. A good example of this is testability - if you write an \"authenticator\" class, then you can imagine either swapping different authenticators in your production code or mocking/faking the authenticator when you're testing other components which use authentication.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"That sounds somewhat overboard to me. (Your example isn't a good one as there's already "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"toString()"}]},{"type":"XmlTextNode","contents":" on "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Object"}]},{"type":"XmlTextNode","contents":".) Don't randomly create interfaces for no purpose - but create them if you want that behaviour to be used by code which doesn't need know about your concrete type, only about what it supports. A good example of this is testability - if you write an \"authenticator\" class, then you can imagine "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"em"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"either"}]},{"type":"XmlTextNode","contents":" swapping different authenticators in your production code "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"em"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"or"}]},{"type":"XmlTextNode","contents":" mocking/faking the authenticator when you're testing other components which use authentication."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"support":1,"test":1,"random":1,"mock":1,"concret":1,"authent":4,"good":2,"interfac":1,"compon":1,"object":1,"code":2,"sound":1,"behaviour":1,"isn":1,"testabl":1,"swap":1,"imagin":1,"fake":1,"type":1,"overboard":1,"creat":2,"purpos":1,"write":1,"product":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"toString","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"toString","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":42.23625000000001,"fleshKincaidGradeLevel":13.144166666666667,"automatedReadingIndex":13.593064516129033,"gunningFogIndex":12.310752688172045,"smogIndex":10.245688373094719,"colemanLiauIndex":12.169677419354837}]}]},{"type":"StackOverflowAnswer","id":10000948,"questionId":10000578,"comments":[{"type":"StackOverflowComment","id":12783913,"postId":10000948,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":771837,"displayName":"trutheality","reputation":14127},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000948-c12783913-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"AnnotationNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"Zapadlo","comments":[]}],"comments":[]},"comments":[]},{"type":"TextFragmentNode","text":" How so?"}]},"rawText":"@Zapadlo How so?","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"@Zapadlo How so?"}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"zapadlo":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"Zapadlo","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":62.79000000000002,"fleshKincaidGradeLevel":5.246666666666666,"automatedReadingIndex":0.4800000000000004,"gunningFogIndex":1.2000000000000002,"smogIndex":3.0,"colemanLiauIndex":-0.27666666666667084}]}]},{"type":"StackOverflowComment","id":12783715,"postId":10000948,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":618020,"displayName":"Zapadlo","reputation":1066},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000948-c12783715-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Hmm, so from this point of view there is nothing to do with interfaces in PHP."}]},"rawText":"Hmm, so from this point of view there is nothing to do with interfaces in PHP.","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"Hmm, so from this point of view there is nothing to do with interfaces in PHP."}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"point":1,"hmm":1,"interfac":1,"php":1,"view":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":90.13250000000001,"fleshKincaidGradeLevel":4.662500000000001,"automatedReadingIndex":4.526875,"gunningFogIndex":6.4,"smogIndex":3.0,"colemanLiauIndex":4.780624999999997}]}]}],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","lastEditDate":"2012-04-03","score":2,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":771837,"displayName":"trutheality","reputation":14127},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000948-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"One very practical reason to implement Comparable is the ability to do things like"}]},"rawText":"One very practical reason to implement Comparable is the ability to do things like","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"One very practical reason to implement "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Comparable"}]},{"type":"XmlTextNode","contents":" is the ability to do things like"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"thing":1,"reason":1,"compar":1,"implement":1,"abil":1,"practic":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":41.553571428571416,"fleshKincaidGradeLevel":10.941428571428574,"automatedReadingIndex":8.783571428571431,"gunningFogIndex":11.314285714285715,"smogIndex":10.745966692414834,"colemanLiauIndex":11.08642857142857}]},{"type":"CodeTaggedUnit","id":"10000948-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"entities","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"Collections","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"sort","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"entities","comments":[]}],"comments":[]}],"comments":[]},"comments":[]}},"comments":[{"text":"// ( initialize and populate )\n"}]},"varType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"List","comments":[]},"typeArguments":{"type":"TypeArgumentsNode","types":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"MyEntity","comments":[]},"comments":[]}],"comments":[]}],"comments":[]},"comments":[]}],"comments":[]}}],"comments":[]},"labels":[],"comments":[]}]},"rawText":"List<MyEntity> entities = // ( initialize and populate )\n\nCollections.sort(entities);\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"List<MyEntity> entities = // ( initialize and populate )\n\nCollections.sort(entities);\n"}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"popul":1,"initi":1,"entiti":3,"collect":1,"sort":1,"list":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"List","comments":[]},"typeArguments":{"type":"TypeArgumentsNode","types":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"MyEntity","comments":[]},"comments":[]}],"comments":[]}],"comments":[]},"comments":[]}],"comments":[]},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"MyEntity","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"Collections","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"sort","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"entities","comments":[]}],"comments":[]}],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"entities","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"Collections","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"sort","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"entities","comments":[]}],"comments":[]}],"comments":[]},"comments":[]}},"comments":[{"text":"// ( initialize and populate )\n"}]},"varType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"List","comments":[]},"typeArguments":{"type":"TypeArgumentsNode","types":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"MyEntity","comments":[]},"comments":[]}],"comments":[]}],"comments":[]},"comments":[]}],"comments":[]}}]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"entities","comments":[]},{"type":"IdentifierNode","name":"Collections","comments":[]},{"type":"IdentifierNode","name":"sort","comments":[]},{"type":"IdentifierNode","name":"entities","comments":[]},{"type":"IdentifierNode","name":"List","comments":[]},{"type":"IdentifierNode","name":"MyEntity","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]}]},{"type":"NaturalLanguageTaggedUnit","id":"10000948-u2","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Without writing a single line of sorting code."}]},"rawText":"Without writing a single line of sorting code.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Without writing a single line of sorting code."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"singl":1,"line":1,"code":1,"sort":1,"write":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":71.81500000000001,"fleshKincaidGradeLevel":5.230000000000004,"automatedReadingIndex":4.942499999999999,"gunningFogIndex":3.2,"smogIndex":3.0,"colemanLiauIndex":8.427499999999998}]},{"type":"NaturalLanguageTaggedUnit","id":"10000948-u3","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Which speaks to the underlying philosophy of using interfaces, which is allowing other people to use your code and (more usefully to you personally) allowing your code to use other people's code in a reliable way."}]},"rawText":"Which speaks to the underlying philosophy of using interfaces, which is allowing other people to use your code and (more usefully to you personally) allowing your code to use other people's code in a reliable way.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Which speaks to the underlying philosophy of using interfaces, which is allowing other people to use your code and (more usefully to you personally) allowing your code to use other people's code in a reliable way."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"philosophi":1,"reliabl":1,"interfac":1,"code":3,"allow":2,"person":1,"use":1,"under":1,"peopl":2,"speak":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":20.658378378378387,"fleshKincaidGradeLevel":19.569729729729733,"automatedReadingIndex":19.21972972972973,"gunningFogIndex":18.043243243243246,"smogIndex":12.486832980505138,"colemanLiauIndex":11.088108108108106}]},{"type":"NaturalLanguageTaggedUnit","id":"10000948-u4","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"As for \"an interface for every behavioral aspect of the class,\" that sounds like overkill, or like it could be overkill. You want interfaces to make sense, so, for example, a "},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"TelephoneThatIsAlsoAToaster","comments":[]},"comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"interface is bad -- you should have two interfaces: Telephone and Toaster. On the other hand, you shouldn't have swarm of interfaces Pluggable, Visible, "},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"HasButtons","comments":[]},"comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":", Flammable... etc.\nThe necessary level of detail will depend on the application."}]},"rawText":"As for \"an interface for every behavioral aspect of the class,\" that sounds like overkill, or like it could be overkill. You want interfaces to make sense, so, for example, a TelephoneThatIsAlsoAToaster interface is bad -- you should have two interfaces: Telephone and Toaster. On the other hand, you shouldn't have swarm of interfaces Pluggable, Visible, HasButtons, Flammable... etc.\nThe necessary level of detail will depend on the application.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"As for \"an interface for "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"strong"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"every"}]},{"type":"XmlTextNode","contents":" behavioral aspect of the class,\" that sounds like overkill, or like it could be overkill. You want interfaces to make sense, so, for example, a "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"TelephoneThatIsAlsoAToaster"}]},{"type":"XmlTextNode","contents":" interface is bad -- you should have two interfaces: "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Telephone"}]},{"type":"XmlTextNode","contents":" and "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Toaster"}]},{"type":"XmlTextNode","contents":". On the other hand, you shouldn't have swarm of interfaces "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Pluggable"}]},{"type":"XmlTextNode","contents":", "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Visible"}]},{"type":"XmlTextNode","contents":", "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"HasButtons"}]},{"type":"XmlTextNode","contents":", "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Flammable"}]},{"type":"XmlTextNode","contents":"... etc.\nThe necessary level of detail will depend on the application."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"swarm":1,"sens":1,"atoast":1,"telephon":2,"overkil":2,"depend":1,"hand":1,"aspect":1,"bad":1,"interfac":3,"visibl":1,"flammabl":1,"pluggabl":1,"button":1,"toaster":1,"sound":1,"applic":1,"make":1,"detail":1,"behavior":1,"shouldn":1,"level":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"TelephoneThatIsAlsoAToaster","comments":[]},"comments":[]}],"comments":[]},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"HasButtons","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"TelephoneThatIsAlsoAToaster","comments":[]},{"type":"IdentifierNode","name":"HasButtons","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":58.13494565217394,"fleshKincaidGradeLevel":9.436050724637681,"automatedReadingIndex":11.700652173913042,"gunningFogIndex":8.059420289855073,"smogIndex":6.872983346207417,"colemanLiauIndex":13.105942028985503}]}]}]}