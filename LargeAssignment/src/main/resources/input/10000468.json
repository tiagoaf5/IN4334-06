{"type":"StackOverflowArtifact","question":{"type":"StackOverflowQuestion","id":10000468,"title":"Good programming habits with return statements","comments":[{"type":"StackOverflowComment","id":12783016,"postId":10000468,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":10468,"displayName":"DarenW","reputation":9321},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000468-c12783016-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"http:"},{"type":"SeparatorNode","symbol":"","comments":[{"text":"//stackoverflow.com/q/4805258/10468 might be worth a look\n"}]}]},"rawText":"http://stackoverflow.com/q/4805258/10468 might be worth a look","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"http://stackoverflow.com/q/4805258/10468 might be worth a look"}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"worth":1,"stackoverflow":1,"http":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":31.545000000000016,"fleshKincaidGradeLevel":10.350000000000001,"automatedReadingIndex":26.314999999999998,"gunningFogIndex":9.066666666666668,"smogIndex":8.477225575051662,"colemanLiauIndex":35.15499999999999}]}]},{"type":"StackOverflowComment","id":12783693,"postId":10000468,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":1311189,"displayName":"stzzz1","reputation":140},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000468-c12783693-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"thank you for the link!"}]},"rawText":"thank you for the link!","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"thank you for the link!"}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"link":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":100.24000000000002,"fleshKincaidGradeLevel":0.5199999999999996,"automatedReadingIndex":-1.9740000000000002,"gunningFogIndex":2.0,"smogIndex":3.0,"colemanLiauIndex":-0.5960000000000001}]}]}],"tags":["java"],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","lastEditDate":"2012-04-03","closedDate":"2012-04-03","score":2,"viewCount":2571,"owner":{"type":"StackOverflowUser","id":1311189,"displayName":"stzzz1","reputation":140},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000468-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"I'm a beginning programmer studying computer science and I've been told many times that using a return statement in a loop is not a good programming habit and should be avoided. Nowadays, I read a lot of code in the Java library to learn how everything works and I'm surprised to see that return statements in loop are everywhere."}]},"rawText":"I'm a beginning programmer studying computer science and I've been told many times that using a return statement in a loop is not a good programming habit and should be avoided. Nowadays, I read a lot of code in the Java library to learn how everything works and I'm surprised to see that return statements in loop are everywhere.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"I'm a beginning programmer studying computer science and I've been told many times that using a return statement in a loop is not a good programming habit and should be avoided. Nowadays, I read a lot of code in the Java library to learn how everything works and I'm surprised to see that return statements in loop are everywhere."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"read":1,"program":1,"scienc":1,"begin":1,"learn":1,"loop":2,"good":1,"habit":1,"librari":1,"told":1,"statement":2,"avoid":1,"work":1,"surpris":1,"code":1,"comput":1,"nowaday":1,"programm":1,"lot":1,"studi":1,"time":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":53.92806451612904,"fleshKincaidGradeLevel":13.438709677419357,"automatedReadingIndex":14.505322580645164,"gunningFogIndex":12.4,"smogIndex":3.0,"colemanLiauIndex":8.787258064516124}]},{"type":"NaturalLanguageTaggedUnit","id":"10000468-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Does anyone could explain me why using return statements in loops should be avoided?"}]},"rawText":"Does anyone could explain me why using return statements in loops should be avoided?","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Does anyone could explain me why using return statements in loops should be avoided?"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"avoid":1,"loop":1,"statement":1,"explain":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":65.72500000000001,"fleshKincaidGradeLevel":7.570000000000004,"automatedReadingIndex":9.120000000000001,"gunningFogIndex":5.6000000000000005,"smogIndex":3.0,"colemanLiauIndex":11.507142857142853}]},{"type":"NaturalLanguageTaggedUnit","id":"10000468-u2","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Thanks!"}]},"rawText":"Thanks!","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Thanks!"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":121.22000000000003,"fleshKincaidGradeLevel":-3.3999999999999986,"automatedReadingIndex":7.329999999999998,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-10.460000000000004}]}]},"answers":[{"type":"StackOverflowAnswer","id":10000497,"questionId":10000468,"comments":[{"type":"StackOverflowComment","id":12783717,"postId":10000497,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":1311189,"displayName":"stzzz1","reputation":140},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000497-c12783717-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"thanks for your answer, it is very helpful!"}]},"rawText":"thanks for your answer, it is very helpful!","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"thanks for your answer, it is very helpful!"}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"help":1,"answer":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":82.39000000000001,"fleshKincaidGradeLevel":3.7550000000000026,"automatedReadingIndex":2.5874999999999986,"gunningFogIndex":3.2,"smogIndex":3.0,"colemanLiauIndex":5.482499999999998}]}]}],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","lastEditDate":"2012-04-03","score":6,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":305644,"displayName":"hvgotcodes","reputation":62556},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000497-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"It all boils down to \"clean code\".  That statement means different things to different people.  Having one return statement at the bottom of a method is considered clean; that is subjective."}]},"rawText":"It all boils down to \"clean code\".  That statement means different things to different people.  Having one return statement at the bottom of a method is considered clean; that is subjective.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"It all boils down to \"clean code\".  That statement means different things to different people.  Having one return statement at the bottom of a method is considered clean; that is subjective."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"boil":1,"method":1,"subject":1,"bottom":1,"clean":2,"mean":1,"thing":1,"statement":2,"code":1,"consid":1,"peopl":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":62.62408602150538,"fleshKincaidGradeLevel":7.091612903225808,"automatedReadingIndex":6.8308602150537645,"gunningFogIndex":6.713978494623657,"smogIndex":7.47213595499958,"colemanLiauIndex":10.176774193548386}]},{"type":"NaturalLanguageTaggedUnit","id":"10000497-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"That said, methods can have multiple return statements and still be considered clean.  It all depends on the tolerance of you and your team, and more importantly, your senior developers consider clean.  "}]},"rawText":"That said, methods can have multiple return statements and still be considered clean.  It all depends on the tolerance of you and your team, and more importantly, your senior developers consider clean.  ","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"That said, methods can have multiple return statements and still be considered clean.  It all depends on the tolerance of you and your team, and more importantly, your senior developers consider clean.  "}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"method":1,"depend":1,"clean":2,"statement":1,"toler":1,"import":1,"consid":1,"team":1,"develop":1,"senior":1,"multipl":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":45.18875,"fleshKincaidGradeLevel":10.931250000000002,"automatedReadingIndex":10.708750000000002,"gunningFogIndex":8.9,"smogIndex":8.477225575051662,"colemanLiauIndex":12.511249999999997}]},{"type":"NaturalLanguageTaggedUnit","id":"10000497-u2","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"It's hard to quantify when you cross the line between acceptable return habits and unreadable/bug-prone code.  A method that is arranged as follows"}]},"rawText":"It's hard to quantify when you cross the line between acceptable return habits and unreadable/bug-prone code.  A method that is arranged as follows","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"It's hard to quantify when you cross the line between acceptable return habits and unreadable/bug-prone code.  A method that is arranged as follows"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"unread":1,"method":1,"accept":1,"arrang":1,"hard":1,"line":1,"habit":1,"prone":1,"quantifi":1,"code":1,"bug":1,"cross":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":64.23000000000002,"fleshKincaidGradeLevel":7.28166666666667,"automatedReadingIndex":8.708749999999998,"gunningFogIndex":6.466666666666668,"smogIndex":6.872983346207417,"colemanLiauIndex":11.886249999999997}]},{"type":"CodeTaggedUnit","id":"10000497-u3","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"method {\n\n "},{"type":"IfStatementNode","expression":{"type":"PrefixOperatorExpressionNode","operator":{"type":"OperatorNode","symbol":"!","comments":[]},"argument":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"x","comments":[]}],"comments":[]},"comments":[]},"statement":{"type":"ReturnStatementNode","labels":[],"comments":[]},"labels":[],"comments":[]},{"type":"TextFragmentNode","text":"for(...) {\n    if (x && y) return\n\n    for(...) "},{"type":"BlockDeclarationNode","modifiers":[],"block":{"type":"BlockNode","statements":[{"type":"IfStatementNode","expression":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"z","comments":[]}],"comments":[]},"statement":{"type":"ReturnStatementNode","labels":[],"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]}},{"type":"TextFragmentNode","text":"}\n\n  "},{"type":"IfStatementNode","expression":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"a","comments":[]}],"comments":[]},"statement":{"type":"ReturnStatementNode","labels":[],"comments":[]},"labels":[],"comments":[]},{"type":"TextFragmentNode","text":"...\n  "},{"type":"ReturnStatementNode","labels":[],"comments":[]},{"type":"TextFragmentNode","text":"}\n"}]},"rawText":"method {\n\n if(!x) return;\n\n  for(...) {\n    if (x && y) return\n\n    for(...) {\n        if (z) return;\n    }\n  }\n\n  if (a) return;\n\n  ...\n  return;\n}\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"method {\n\n if(!x) return;\n\n  for(...) {\n    if (x && y) return\n\n    for(...) {\n        if (z) return;\n    }\n  }\n\n  if (a) return;\n\n  ...\n  return;\n}\n"}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"method":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"x","comments":[]},{"type":"IdentifierNode","name":"z","comments":[]},{"type":"IdentifierNode","name":"a","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]}]},{"type":"NaturalLanguageTaggedUnit","id":"10000497-u4","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"is pretty much not clean no matter how you look at it. "}]},"rawText":"is pretty much not clean no matter how you look at it. ","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"is pretty much not clean no matter how you look at it. "}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"matter":1,"pretti":1,"clean":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":88.905,"fleshKincaidGradeLevel":3.84,"automatedReadingIndex":1.0549999999999997,"gunningFogIndex":4.800000000000001,"smogIndex":3.0,"colemanLiauIndex":2.3149999999999977}]},{"type":"NaturalLanguageTaggedUnit","id":"10000497-u5","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"In other words, too many return statements is a code-smell that possible the code in question needs another look"}]},"rawText":"In other words, too many return statements is a code-smell that possible the code in question needs another look","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"In other words, too many return statements is a code-smell that possible the code in question needs another look"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"question":1,"statement":1,"code":2,"smell":1,"word":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":53.97105263157897,"fleshKincaidGradeLevel":10.451578947368422,"automatedReadingIndex":11.124210526315785,"gunningFogIndex":7.6000000000000005,"smogIndex":3.0,"colemanLiauIndex":11.451052631578946}]}]},{"type":"StackOverflowAnswer","id":10000512,"questionId":10000468,"comments":[],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","score":0,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":1310604,"displayName":"RyanS","reputation":1550},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000512-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"In the olden days it could confuse compilers and the VM, not so much anymore so it's generally a safe practice. I think people also make the general 'poor practice' argument that if your a truly good programmer you'll find a more elegant way to do the same thing."}]},"rawText":"In the olden days it could confuse compilers and the VM, not so much anymore so it's generally a safe practice. I think people also make the general 'poor practice' argument that if your a truly good programmer you'll find a more elegant way to do the same thing.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"In the olden days it could confuse compilers and the VM, not so much anymore so it's generally a safe practice. I think people also make the general 'poor practice' argument that if your a truly good programmer you'll find a more elegant way to do the same thing."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"find":1,"good":1,"thing":1,"safe":1,"olden":1,"eleg":1,"anymor":1,"general":2,"poor":1,"programm":1,"make":1,"confus":1,"compil":1,"practic":2,"peopl":1,"argument":1,"day":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":58.19955882352943,"fleshKincaidGradeLevel":11.47656862745098,"automatedReadingIndex":10.71411764705882,"gunningFogIndex":10.984313725490196,"smogIndex":6.872983346207417,"colemanLiauIndex":7.276470588235291}]},{"type":"NaturalLanguageTaggedUnit","id":"10000512-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Cheers"}]},"rawText":"Cheers","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Cheers"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"cheer":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":121.22000000000003,"fleshKincaidGradeLevel":-3.3999999999999986,"automatedReadingIndex":7.329999999999998,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-10.460000000000004}]}]},{"type":"StackOverflowAnswer","id":10000546,"questionId":10000468,"comments":[],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","score":1,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":1232878,"displayName":"DRVic","reputation":2043},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000546-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Those who adhere to the \"single return\" religion will go to great lengths to break out of loops cleanly, setting flags to indicate that it is time to return.  "}]},"rawText":"Those who adhere to the \"single return\" religion will go to great lengths to break out of loops cleanly, setting flags to indicate that it is time to return.  ","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Those who adhere to the \"single return\" religion will go to great lengths to break out of loops cleanly, setting flags to indicate that it is time to return.  "}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"singl":1,"loop":1,"set":1,"clean":1,"adher":1,"flag":1,"length":1,"time":1,"religion":1,"great":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":60.71034482758621,"fleshKincaidGradeLevel":11.995862068965518,"automatedReadingIndex":13.371724137931032,"gunningFogIndex":11.600000000000001,"smogIndex":3.0,"colemanLiauIndex":8.553448275862067}]},{"type":"NaturalLanguageTaggedUnit","id":"10000546-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"The best way to take such admonitions is to think about whether there is a good reason to return prematurely, or whether it is indicating sloppiness in thinking about how to structure the code.  "}]},"rawText":"The best way to take such admonitions is to think about whether there is a good reason to return prematurely, or whether it is indicating sloppiness in thinking about how to structure the code.  ","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"The best way to take such admonitions is to think about whether there is a good reason to return prematurely, or whether it is indicating sloppiness in thinking about how to structure the code.  "}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"good":1,"reason":1,"structur":1,"code":1,"indic":1,"think":1,"sloppi":1,"prematur":1,"admonit":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":47.91323529411767,"fleshKincaidGradeLevel":15.022941176470592,"automatedReadingIndex":17.457647058823532,"gunningFogIndex":18.30588235294118,"smogIndex":13.954451150103322,"colemanLiauIndex":10.688823529411764}]}]},{"type":"StackOverflowAnswer","id":10000555,"questionId":10000468,"comments":[{"type":"StackOverflowComment","id":12783742,"postId":10000555,"creationDate":"2012-04-03","score":2,"isEdited":false,"owner":{"type":"StackOverflowUser","id":466862,"displayName":"Mark Rotteveel","reputation":26358},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000555-c12783742-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"On the other hand: people jump through a lot of hoops and create unreadable code just so they can have a single return."}]},"rawText":"On the other hand: people jump through a lot of hoops and create unreadable code just so they can have a single return.","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"On the other hand: people jump through a lot of hoops and create unreadable code just so they can have a single return."}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"unread":1,"singl":1,"hoop":1,"jump":1,"hand":1,"code":1,"lot":1,"peopl":1,"creat":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":69.46391304347827,"fleshKincaidGradeLevel":9.284347826086957,"automatedReadingIndex":9.524347826086956,"gunningFogIndex":9.200000000000001,"smogIndex":3.0,"colemanLiauIndex":7.223913043478259}]}]}],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","score":0,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":976731,"displayName":"StAlphonzo","reputation":347},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000555-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"I think the reason many people consider it cleaner ( and safer style ) is; as functions get more and more complicate ( which they often do as applications grow ), exit points in the middle of the function can be harder to trace, can become confusing and can lead to subtle bugs."}]},"rawText":"I think the reason many people consider it cleaner ( and safer style ) is; as functions get more and more complicate ( which they often do as applications grow ), exit points in the middle of the function can be harder to trace, can become confusing and can lead to subtle bugs.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"I think the reason many people consider it cleaner ( and safer style ) is; as functions get more and more complicate ( which they often do as applications grow ), exit points in the middle of the function can be harder to trace, can become confusing and can lead to subtle bugs."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"lead":1,"point":1,"trace":1,"middl":1,"cleaner":1,"style":1,"subtl":1,"complic":1,"reason":1,"bug":1,"grow":1,"function":2,"applic":1,"exit":1,"confus":1,"safer":1,"peopl":1,"harder":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":37.969387755102076,"fleshKincaidGradeLevel":20.13632653061224,"automatedReadingIndex":24.024693877551023,"gunningFogIndex":20.416326530612245,"smogIndex":8.477225575051662,"colemanLiauIndex":9.792244897959183}]},{"type":"NaturalLanguageTaggedUnit","id":"10000555-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"As with all 'rules' though, there are exceptions and cases where a return in the middle of a function is way cleaner than the likely if ( !error ) blocks that might result from waiting until the end."}]},"rawText":"As with all 'rules' though, there are exceptions and cases where a return in the middle of a function is way cleaner than the likely if ( !error ) blocks that might result from waiting until the end.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"As with all 'rules' though, there are exceptions and cases where a return in the middle of a function is way cleaner than the likely if ( !error ) blocks that might result from waiting until the end."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"wait":1,"middl":1,"cleaner":1,"result":1,"rule":1,"block":1,"error":1,"function":1,"end":1,"case":1,"except":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":75.765,"fleshKincaidGradeLevel":7.163333333333334,"automatedReadingIndex":7.849166666666665,"gunningFogIndex":7.2,"smogIndex":3.0,"colemanLiauIndex":7.893055555555552}]}]},{"type":"StackOverflowAnswer","id":10000668,"questionId":10000468,"comments":[{"type":"StackOverflowComment","id":12783776,"postId":10000668,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":1311189,"displayName":"stzzz1","reputation":140},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000668-c12783776-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"thank you, it makes a lot of sense!"}]},"rawText":"thank you, it makes a lot of sense!","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"thank you, it makes a lot of sense!"}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"sens":1,"make":1,"lot":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":103.54,"fleshKincaidGradeLevel":0.8049999999999997,"automatedReadingIndex":-2.1225000000000023,"gunningFogIndex":3.2,"smogIndex":3.0,"colemanLiauIndex":-0.4075000000000024}]}]}],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","score":2,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":1064659,"displayName":"Taymon","reputation":9726},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000668-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"The reason return statements in loops have long been discouraged is because of a paradigm called structured programming, which basically means that the flow of execution within a program should be simple and easily followed from anywhere. At the time, GOTO was still in widespread use and was making a nightmare of code readability; as part of the backlash against it, it was often said that every block of code should have only one exit point, and the only jumps should be in conditional branches, loops, and function calls. Many people still believe this, and consequently dislike break statements, exceptions, and return statements in loops."}]},"rawText":"The reason return statements in loops have long been discouraged is because of a paradigm called structured programming, which basically means that the flow of execution within a program should be simple and easily followed from anywhere. At the time, GOTO was still in widespread use and was making a nightmare of code readability; as part of the backlash against it, it was often said that every block of code should have only one exit point, and the only jumps should be in conditional branches, loops, and function calls. Many people still believe this, and consequently dislike break statements, exceptions, and return statements in loops.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"The reason return statements in loops have long been discouraged is because of a paradigm called "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"a"},"attributes":[{"type":"XmlAttributeNode","name":{"type":"XmlNameNode","value":"a"},"value":{"type":"StringLiteralNode","valueRep":"http://en.wikipedia.org/wiki/Structured_programming"}},{"type":"XmlAttributeNode","name":{"type":"XmlNameNode","value":"a"},"value":{"type":"StringLiteralNode","valueRep":"nofollow"}}],"elements":[{"type":"XmlTextNode","contents":"structured programming"}]},{"type":"XmlTextNode","contents":", which basically means that the flow of execution within a program should be simple and easily followed from anywhere. At the time, GOTO was still in widespread use and was making a nightmare of code readability; as part of the backlash against it, it was often said that every block of code should have only one exit point, and the only jumps should be in conditional branches, loops, and function calls. Many people still believe this, and consequently dislike break statements, exceptions, and return statements in loops."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"program":2,"point":1,"loop":3,"simpl":1,"backlash":1,"discourag":1,"jump":1,"condit":1,"widespread":1,"branch":1,"nightmar":1,"mean":1,"statement":3,"reason":1,"structur":1,"dislik":1,"code":2,"easili":1,"block":1,"readabl":1,"paradigm":1,"flow":1,"function":1,"exit":1,"make":1,"time":1,"part":1,"basic":1,"peopl":1,"except":1,"call":2,"execut":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":44.00714285714287,"fleshKincaidGradeLevel":15.816190476190474,"automatedReadingIndex":19.709714285714284,"gunningFogIndex":15.904761904761905,"smogIndex":10.071067811865476,"colemanLiauIndex":12.905047619047615}]},{"type":"NaturalLanguageTaggedUnit","id":"10000668-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"My own view is that it's more important to be able to understand what a particular chunk of code does than to be able to follow its exact flow of execution. (I often program in functional languages, and try to write my code in a functional style even when I'm not.) As such, I think return statements in loops are fine. It's ultimately a matter of taste."}]},"rawText":"My own view is that it's more important to be able to understand what a particular chunk of code does than to be able to follow its exact flow of execution. (I often program in functional languages, and try to write my code in a functional style even when I'm not.) As such, I think return statements in loops are fine. It's ultimately a matter of taste.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"My own view is that it's more important to be able to understand what a particular chunk of code "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"em"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"does"}]},{"type":"XmlTextNode","contents":" than to be able to follow its exact flow of execution. (I often program in "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"a"},"attributes":[{"type":"XmlAttributeNode","name":{"type":"XmlNameNode","value":"a"},"value":{"type":"StringLiteralNode","valueRep":"http://en.wikipedia.org/wiki/Functional_programming"}},{"type":"XmlAttributeNode","name":{"type":"XmlNameNode","value":"a"},"value":{"type":"StringLiteralNode","valueRep":"nofollow"}}],"elements":[{"type":"XmlTextNode","contents":"functional"}]},{"type":"XmlTextNode","contents":" languages, and try to write my code in a functional style even when I'm not.) As such, I think return statements in loops are fine. It's ultimately a matter of taste."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"program":1,"tast":1,"chunk":1,"languag":1,"loop":1,"style":1,"understand":1,"statement":1,"exact":1,"code":2,"import":1,"flow":1,"function":2,"fine":1,"ultim":1,"matter":1,"write":1,"execut":1,"follow":1,"view":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":73.04964285714289,"fleshKincaidGradeLevel":7.4178571428571445,"automatedReadingIndex":6.16,"gunningFogIndex":8.714285714285714,"smogIndex":7.743416490252569,"colemanLiauIndex":6.045714285714283}]}]},{"type":"StackOverflowAnswer","id":10000810,"questionId":10000468,"comments":[{"type":"StackOverflowComment","id":46953329,"postId":10000810,"creationDate":"2015-04-01","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":624459,"displayName":"brainray","reputation":3615},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000810-c46953329-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"it definitely depends on your habits. For me repeatedly using returns doesn't show the control-flow and it's depth. It's often hard to get in which case something happens and when not."}]},"rawText":"it definitely depends on your habits. For me repeatedly using returns doesn't show the control-flow and it's depth. It's often hard to get in which case something happens and when not.","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"it definitely depends on your habits. For me repeatedly using returns doesn't show the control-flow and it's depth. It's often hard to get in which case something happens and when not."}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"show":1,"hard":1,"depend":1,"return":1,"habit":1,"flow":1,"control":1,"depth":1,"repeat":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":70.91990196078433,"fleshKincaidGradeLevel":6.182941176470592,"automatedReadingIndex":5.154607843137256,"gunningFogIndex":6.886274509803923,"smogIndex":7.47213595499958,"colemanLiauIndex":7.71147058823529}]}]},{"type":"StackOverflowComment","id":32253246,"postId":10000810,"creationDate":"2014-01-27","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":1944408,"displayName":"user1944408","reputation":142},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000810-c32253246-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"if you use the same constructs as with guard statements your while loop will not look so complicated."}]},"rawText":"if you use the same constructs as with guard statements your while loop will not look so complicated.","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"if you use the same constructs as with guard statements your while loop will not look so complicated."}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"loop":1,"complic":1,"statement":1,"guard":1,"construct":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":66.36500000000001,"fleshKincaidGradeLevel":8.474444444444444,"automatedReadingIndex":9.28833333333333,"gunningFogIndex":9.422222222222222,"smogIndex":8.477225575051662,"colemanLiauIndex":9.692777777777774}]}]},{"type":"StackOverflowComment","id":32258173,"postId":10000810,"creationDate":"2014-01-27","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":10631,"displayName":"Cliff","reputation":4032},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000810-c32258173-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"I agree but the problem is with the \"if\" which assumes that others will have the discipline to maintain \"the same constructs\". Most engineers (even well meaning engineers) will see a method constructed with multiple exits and just follow form. If the method is refactored to convey its intent w/o multiple exits then there is a mental hurdle you'd have to overcome to be the 1st to introduce an early exit point. so long as the for of guard clause at the very top is followed with only one other exit at the bottom then it can be managed."}]},"rawText":"I agree but the problem is with the \"if\" which assumes that others will have the discipline to maintain \"the same constructs\". Most engineers (even well meaning engineers) will see a method constructed with multiple exits and just follow form. If the method is refactored to convey its intent w/o multiple exits then there is a mental hurdle you'd have to overcome to be the 1st to introduce an early exit point. so long as the for of guard clause at the very top is followed with only one other exit at the bottom then it can be managed.","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"I agree but the problem is with the \"if\" which assumes that others will have the discipline to maintain \"the same constructs\". Most engineers (even well meaning engineers) will see a method constructed with multiple exits and just follow form. If the method is refactored to convey its intent w/o multiple exits then there is a mental hurdle you'd have to overcome to be the 1st to introduce an early exit point. so long as the for of guard clause at the very top is followed with only one other exit at the bottom then it can be managed."}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"method":2,"assum":1,"point":1,"claus":1,"intent":1,"problem":1,"bottom":1,"disciplin":1,"introduc":1,"mean":1,"earli":1,"hurdl":1,"engin":2,"overcom":1,"refactor":1,"exit":4,"agre":1,"guard":1,"form":1,"manag":1,"convey":1,"multipl":2,"top":1,"construct":2,"mental":1,"follow":1,"maintain":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":63.02000000000001,"fleshKincaidGradeLevel":10.68,"automatedReadingIndex":11.323,"gunningFogIndex":10.0,"smogIndex":3.0,"colemanLiauIndex":8.326999999999998}]}]},{"type":"StackOverflowComment","id":12784664,"postId":10000810,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":898289,"displayName":"Adam","reputation":11476},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000810-c12784664-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"+1 Single return statement is the only correct answer for so many reasons!"}]},"rawText":"+1 Single return statement is the only correct answer for so many reasons!","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"+1 Single return statement is the only correct answer for so many reasons!"}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"singl":1,"correct":1,"statement":1,"reason":1,"answer":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":63.486153846153854,"fleshKincaidGradeLevel":7.633846153846157,"automatedReadingIndex":7.170769230769231,"gunningFogIndex":5.2,"smogIndex":3.0,"colemanLiauIndex":9.529999999999998}]}]},{"type":"StackOverflowComment","id":12784572,"postId":10000810,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":1311189,"displayName":"stzzz1","reputation":140},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000810-c12784572-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"thank you for this great answer!"}]},"rawText":"thank you for this great answer!","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"thank you for this great answer!"}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"great":1,"answer":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":87.94500000000001,"fleshKincaidGradeLevel":2.4833333333333343,"automatedReadingIndex":1.9800000000000004,"gunningFogIndex":2.4000000000000004,"smogIndex":3.0,"colemanLiauIndex":4.723333333333329}]}]}],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","score":5,"isAccepted":true,"owner":{"type":"StackOverflowUser","id":10631,"displayName":"Cliff","reputation":4032},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000810-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Most people like to look at a method and assume a single point of exit. When you interpolate returns in the middle of loops it breaks up the flow a bit and jars this assumption. That's why many will make the \"not clean\" argument. There's really nothing dirty about it, but it forces the \"human\" reader of the program to dig deeper into the method to get a clearer understanding of its flow. Anything you can do to reduce the amount of mental deducing people have to do to understand the flow of your logic is considered a good thing. "}]},"rawText":"Most people like to look at a method and assume a single point of exit. When you interpolate returns in the middle of loops it breaks up the flow a bit and jars this assumption. That's why many will make the \"not clean\" argument. There's really nothing dirty about it, but it forces the \"human\" reader of the program to dig deeper into the method to get a clearer understanding of its flow. Anything you can do to reduce the amount of mental deducing people have to do to understand the flow of your logic is considered a good thing. ","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Most people like to look at a method and assume a single point of exit. When you interpolate returns in the middle of loops it breaks up the flow a bit and jars this assumption. That's why many will make the \"not clean\" argument. There's really nothing dirty about it, but it forces the \"human\" reader of the program to dig deeper into the method to get a clearer understanding of its flow. Anything you can do to reduce the amount of mental deducing people have to do to understand the flow of your logic is considered a good thing. "}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"program":1,"singl":1,"method":2,"assum":1,"point":1,"loop":1,"bit":1,"break":1,"reduc":1,"middl":1,"reader":1,"return":1,"good":1,"human":1,"clean":1,"understand":2,"thing":1,"logic":1,"amount":1,"deeper":1,"deduc":1,"assumpt":1,"consid":1,"interpol":1,"flow":3,"exit":1,"make":1,"clearer":1,"dig":1,"forc":1,"peopl":2,"dirti":1,"jar":1,"argument":1,"mental":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":67.52311764705885,"fleshKincaidGradeLevel":8.90913725490196,"automatedReadingIndex":8.348823529411767,"gunningFogIndex":9.336470588235294,"smogIndex":7.242640687119285,"colemanLiauIndex":7.213333333333328}]},{"type":"NaturalLanguageTaggedUnit","id":"10000810-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"If I could glance at a method without reading through its internals while getting an overall general understanding of what it does and where it exits then the author did a good job. Trouble arises when a method, which means well initially, grows over time and forces maintainers to juggle multiple states mentally in an exercise to understand it."}]},"rawText":"If I could glance at a method without reading through its internals while getting an overall general understanding of what it does and where it exits then the author did a good job. Trouble arises when a method, which means well initially, grows over time and forces maintainers to juggle multiple states mentally in an exercise to understand it.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"If I could glance at a method without reading through its internals while getting an overall general understanding of what it does and where it exits then the author did a good job. Trouble arises when a method, which means well initially, grows over time and forces maintainers to juggle multiple states mentally in an exercise to understand it."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"read":1,"method":2,"author":1,"state":1,"good":1,"understand":2,"juggl":1,"job":1,"mean":1,"general":1,"aris":1,"grow":1,"troubl":1,"exercis":1,"exit":1,"initi":1,"time":1,"forc":1,"multipl":1,"intern":1,"mental":1,"glanc":1,"maintain":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":50.709449152542405,"fleshKincaidGradeLevel":13.515000000000004,"automatedReadingIndex":15.991864406779662,"gunningFogIndex":12.477966101694916,"smogIndex":6.872983346207417,"colemanLiauIndex":11.534915254237287}]},{"type":"NaturalLanguageTaggedUnit","id":"10000810-u2","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"A good example is the classic guard clause which is considered good practice by some. It's a way of checking the state or a parameter for validity before continuing. If a method is given the wrong stuff then we don't want to continue. See this fake code:"}]},"rawText":"A good example is the classic guard clause which is considered good practice by some. It's a way of checking the state or a parameter for validity before continuing. If a method is given the wrong stuff then we don't want to continue. See this fake code:","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"A good example is the classic guard clause which is considered good practice by some. It's a way of checking the state or a parameter for validity before continuing. If a method is given the wrong stuff then we don't want to continue. See this fake code:"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"method":1,"claus":1,"state":1,"wrong":1,"continu":1,"good":2,"classic":1,"code":1,"paramet":1,"check":1,"consid":1,"stuff":1,"valid":1,"fake":1,"guard":1,"practic":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":71.81757653061226,"fleshKincaidGradeLevel":6.285459183673471,"automatedReadingIndex":4.303979591836736,"gunningFogIndex":7.348979591836735,"smogIndex":7.743416490252569,"colemanLiauIndex":6.272653061224489}]},{"type":"CodeTaggedUnit","id":"10000810-u3","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]}],"returnType":{"type":"PrimitiveTypeNode","name":"void","comments":[]},"identifier":{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},"parameters":{"type":"FormalParametersNode","parameters":{"type":"FormalParameterDeclsNode","formalParameters":[{"type":"FormalParameterDeclNode","modifiers":[],"parameterType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Object","comments":[]},"comments":[]}],"comments":[]},"variableDeclarator":{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"stuff","comments":[]},"arrayDepth":[]},"isVariadic":false,"comments":[]}],"comments":[]},"comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[{"type":"IfStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"weWereNotExpectingThis","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"stuff","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},"statement":{"type":"ReturnStatementNode","labels":[],"comments":[{"text":"//guard clause\n"}]},"labels":[],"comments":[]},{"type":"WhileStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"somethingHappens","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"statement":{"type":"BlockNode","statements":[{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"labels":[]}],"labels":[],"comments":[]},"labels":[],"comments":[]},{"type":"ReturnStatementNode","labels":[],"comments":[]}],"labels":[],"comments":[]},"comments":[]}]},"rawText":"public void doSomethingCool(Object stuff) {\n  if(weWereNotExpectingThis(stuff)) return; //guard clause\n\n  while(somethingHappens()) {\n      doSomethingCool();\n  }\n  return;\n}\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"public void doSomethingCool(Object stuff) {\n  if(weWereNotExpectingThis(stuff)) return; //guard clause\n\n  while(somethingHappens()) {\n      doSomethingCool();\n  }\n  return;\n}\n"}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"claus":1,"object":1,"expect":1,"cool":2,"stuff":2,"guard":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Object","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[{"type":"PrimitiveTypeNode","name":"void","comments":[]}]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"weWereNotExpectingThis","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"stuff","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"somethingHappens","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"stuff","comments":[]},"arrayDepth":[]}]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},{"type":"IdentifierNode","name":"Object","comments":[]},{"type":"IdentifierNode","name":"stuff","comments":[]},{"type":"IdentifierNode","name":"weWereNotExpectingThis","comments":[]},{"type":"IdentifierNode","name":"stuff","comments":[]},{"type":"IdentifierNode","name":"somethingHappens","comments":[]},{"type":"IdentifierNode","name":"doSomethingCool","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]}],"returnType":{"type":"PrimitiveTypeNode","name":"void","comments":[]},"identifier":{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},"parameters":{"type":"FormalParametersNode","parameters":{"type":"FormalParameterDeclsNode","formalParameters":[{"type":"FormalParameterDeclNode","modifiers":[],"parameterType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Object","comments":[]},"comments":[]}],"comments":[]},"variableDeclarator":{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"stuff","comments":[]},"arrayDepth":[]},"isVariadic":false,"comments":[]}],"comments":[]},"comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[{"type":"IfStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"weWereNotExpectingThis","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"stuff","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},"statement":{"type":"ReturnStatementNode","labels":[],"comments":[{"text":"//guard clause\n"}]},"labels":[],"comments":[]},{"type":"WhileStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"somethingHappens","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"statement":{"type":"BlockNode","statements":[{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"labels":[]}],"labels":[],"comments":[]},"labels":[],"comments":[]},{"type":"ReturnStatementNode","labels":[],"comments":[]}],"labels":[],"comments":[]},"comments":[]}]}]},{"type":"NaturalLanguageTaggedUnit","id":"10000810-u4","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Somebody comes along and says, \"hey cool! We it's ok to use return statements in the middle of methods!\" They make changes and it becomes:"}]},"rawText":"Somebody comes along and says, \"hey cool! We it's ok to use return statements in the middle of methods!\" They make changes and it becomes:","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Somebody comes along and says, \"hey cool! We it's ok to use return statements in the middle of methods!\" They make changes and it becomes:"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"method":1,"middl":1,"statement":1,"cool":1,"make":1,"hey":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":87.40756410256414,"fleshKincaidGradeLevel":3.220769230769232,"automatedReadingIndex":2.467948717948719,"gunningFogIndex":3.466666666666667,"smogIndex":3.0,"colemanLiauIndex":5.2046153846153835}]},{"type":"CodeTaggedUnit","id":"10000810-u5","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]}],"returnType":{"type":"PrimitiveTypeNode","name":"void","comments":[]},"identifier":{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},"parameters":{"type":"FormalParametersNode","parameters":{"type":"FormalParameterDeclsNode","formalParameters":[{"type":"FormalParameterDeclNode","modifiers":[],"parameterType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Object","comments":[]},"comments":[]}],"comments":[]},"variableDeclarator":{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"stuff","comments":[]},"arrayDepth":[]},"isVariadic":false,"comments":[]}],"comments":[]},"comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[{"type":"IfStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"weWereNotExpectingThis","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"stuff","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},"statement":{"type":"ReturnStatementNode","labels":[],"comments":[{"text":"//guard clause\n"}]},"labels":[],"comments":[]},{"type":"WhileStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"somethingHappens","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"statement":{"type":"BlockNode","statements":[{"type":"IfStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"somthingHasChanged","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"statement":{"type":"ReturnStatementNode","labels":[],"comments":[{"text":"//because my team likes early exits, Yay!\n"}]},"elseStatement":{"type":"ElseStatementNode","statement":{"type":"BlockNode","statements":[{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"labels":[]}],"labels":[],"comments":[]},"labels":[],"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]},"labels":[],"comments":[]},{"type":"ReturnStatementNode","labels":[],"comments":[]}],"labels":[],"comments":[]},"comments":[]}]},"rawText":"public void doSomethingCool(Object stuff) {\n  if(weWereNotExpectingThis(stuff)) return; //guard clause\n\n  while(somethingHappens()) {\n    if(somthingHasChanged()) return; //because my team likes early exits, Yay!\n    else {\n      doSomethingCool();\n    }\n  }\n  return;\n}\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"public void doSomethingCool(Object stuff) {\n  if(weWereNotExpectingThis(stuff)) return; //guard clause\n\n  while(somethingHappens()) {\n    if(somthingHasChanged()) return; //because my team likes early exits, Yay!\n    else {\n      doSomethingCool();\n    }\n  }\n  return;\n}\n"}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"chang":1,"claus":1,"earli":1,"object":1,"somth":1,"expect":1,"cool":2,"stuff":2,"team":1,"exit":1,"yay":1,"guard":1,"like":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Object","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[{"type":"PrimitiveTypeNode","name":"void","comments":[]}]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"weWereNotExpectingThis","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"stuff","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"somethingHappens","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"somthingHasChanged","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"stuff","comments":[]},"arrayDepth":[]}]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},{"type":"IdentifierNode","name":"Object","comments":[]},{"type":"IdentifierNode","name":"stuff","comments":[]},{"type":"IdentifierNode","name":"weWereNotExpectingThis","comments":[]},{"type":"IdentifierNode","name":"stuff","comments":[]},{"type":"IdentifierNode","name":"somethingHappens","comments":[]},{"type":"IdentifierNode","name":"somthingHasChanged","comments":[]},{"type":"IdentifierNode","name":"doSomethingCool","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]}],"returnType":{"type":"PrimitiveTypeNode","name":"void","comments":[]},"identifier":{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},"parameters":{"type":"FormalParametersNode","parameters":{"type":"FormalParameterDeclsNode","formalParameters":[{"type":"FormalParameterDeclNode","modifiers":[],"parameterType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Object","comments":[]},"comments":[]}],"comments":[]},"variableDeclarator":{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"stuff","comments":[]},"arrayDepth":[]},"isVariadic":false,"comments":[]}],"comments":[]},"comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[{"type":"IfStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"weWereNotExpectingThis","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"stuff","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},"statement":{"type":"ReturnStatementNode","labels":[],"comments":[{"text":"//guard clause\n"}]},"labels":[],"comments":[]},{"type":"WhileStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"somethingHappens","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"statement":{"type":"BlockNode","statements":[{"type":"IfStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"somthingHasChanged","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"statement":{"type":"ReturnStatementNode","labels":[],"comments":[{"text":"//because my team likes early exits, Yay!\n"}]},"elseStatement":{"type":"ElseStatementNode","statement":{"type":"BlockNode","statements":[{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"labels":[]}],"labels":[],"comments":[]},"labels":[],"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]},"labels":[],"comments":[]},{"type":"ReturnStatementNode","labels":[],"comments":[]}],"labels":[],"comments":[]},"comments":[]}]}]},{"type":"NaturalLanguageTaggedUnit","id":"10000810-u6","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Still not too shabby, but more and more changes go in and you end up with this:"}]},"rawText":"Still not too shabby, but more and more changes go in and you end up with this:","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Still not too shabby, but more and more changes go in and you end up with this:"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"shabbi":1,"end":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":95.02705882352943,"fleshKincaidGradeLevel":4.228235294117649,"automatedReadingIndex":3.9705882352941195,"gunningFogIndex":6.800000000000001,"smogIndex":3.0,"colemanLiauIndex":3.5699999999999967}]},{"type":"CodeTaggedUnit","id":"10000810-u7","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]}],"returnType":{"type":"PrimitiveTypeNode","name":"void","comments":[]},"identifier":{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},"parameters":{"type":"FormalParametersNode","parameters":{"type":"FormalParameterDeclsNode","formalParameters":[{"type":"FormalParameterDeclNode","modifiers":[],"parameterType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Object","comments":[]},"comments":[]}],"comments":[]},"variableDeclarator":{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"stuff","comments":[]},"arrayDepth":[]},"isVariadic":false,"comments":[]}],"comments":[]},"comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[{"type":"IfStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"weWereNotExpectingThis","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"stuff","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},"statement":{"type":"ReturnStatementNode","labels":[],"comments":[{"text":"//guard clause\n"}]},"labels":[],"comments":[]},{"type":"WhileStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"somethingHappens","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"statement":{"type":"BlockNode","statements":[{"type":"IfStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"somthingHasChanged","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"statement":{"type":"ReturnStatementNode","labels":[],"comments":[]},"elseStatement":{"type":"ElseStatementNode","statement":{"type":"IfStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"weDetectNewInput","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"statement":{"type":"BlockNode","statements":[{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"labels":[]}],"labels":[],"comments":[]},"elseStatement":{"type":"ElseStatementNode","statement":{"type":"BlockNode","statements":[{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"doSomethingBoring","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"labels":[]},{"type":"IfStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"weDetectCoolInput","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"statement":{"type":"BlockNode","statements":[{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"labels":[]},{"type":"ContinueStatementNode","labels":[],"comments":[]}],"labels":[],"comments":[]},"labels":[],"comments":[]},{"type":"ReturnStatementNode","labels":[],"comments":[]}],"labels":[],"comments":[]},"labels":[],"comments":[]},"labels":[],"comments":[]},"labels":[],"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]},"labels":[],"comments":[]},{"type":"ReturnStatementNode","labels":[],"comments":[]}],"labels":[],"comments":[]},"comments":[]}]},"rawText":"public void doSomethingCool(Object stuff) {\n  if(weWereNotExpectingThis(stuff)) return; //guard clause\n\n  while(somethingHappens()) {\n    if(somthingHasChanged()) return;\n    else if(weDetectNewInput()) {\n      doSomethingCool();\n    } else {\n      doSomethingBoring();\n      if(weDetectCoolInput()) {\n        doSomethingCool();\n        continue;\n      }\n      return;\n    }\n  }\n  return;\n}\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"public void doSomethingCool(Object stuff) {\n  if(weWereNotExpectingThis(stuff)) return; //guard clause\n\n  while(somethingHappens()) {\n    if(somthingHasChanged()) return;\n    else if(weDetectNewInput()) {\n      doSomethingCool();\n    } else {\n      doSomethingBoring();\n      if(weDetectCoolInput()) {\n        doSomethingCool();\n        continue;\n      }\n      return;\n    }\n  }\n  return;\n}\n"}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"chang":1,"claus":1,"detect":2,"object":1,"somth":1,"expect":1,"cool":4,"bore":1,"stuff":2,"guard":1,"input":2}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Object","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[{"type":"PrimitiveTypeNode","name":"void","comments":[]}]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"weWereNotExpectingThis","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"stuff","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"somethingHappens","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"somthingHasChanged","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"weDetectNewInput","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"doSomethingBoring","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"weDetectCoolInput","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"stuff","comments":[]},"arrayDepth":[]}]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},{"type":"IdentifierNode","name":"Object","comments":[]},{"type":"IdentifierNode","name":"stuff","comments":[]},{"type":"IdentifierNode","name":"weWereNotExpectingThis","comments":[]},{"type":"IdentifierNode","name":"stuff","comments":[]},{"type":"IdentifierNode","name":"somethingHappens","comments":[]},{"type":"IdentifierNode","name":"somthingHasChanged","comments":[]},{"type":"IdentifierNode","name":"weDetectNewInput","comments":[]},{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},{"type":"IdentifierNode","name":"doSomethingBoring","comments":[]},{"type":"IdentifierNode","name":"weDetectCoolInput","comments":[]},{"type":"IdentifierNode","name":"doSomethingCool","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]}],"returnType":{"type":"PrimitiveTypeNode","name":"void","comments":[]},"identifier":{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},"parameters":{"type":"FormalParametersNode","parameters":{"type":"FormalParameterDeclsNode","formalParameters":[{"type":"FormalParameterDeclNode","modifiers":[],"parameterType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Object","comments":[]},"comments":[]}],"comments":[]},"variableDeclarator":{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"stuff","comments":[]},"arrayDepth":[]},"isVariadic":false,"comments":[]}],"comments":[]},"comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[{"type":"IfStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"weWereNotExpectingThis","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"stuff","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},"statement":{"type":"ReturnStatementNode","labels":[],"comments":[{"text":"//guard clause\n"}]},"labels":[],"comments":[]},{"type":"WhileStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"somethingHappens","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"statement":{"type":"BlockNode","statements":[{"type":"IfStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"somthingHasChanged","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"statement":{"type":"ReturnStatementNode","labels":[],"comments":[]},"elseStatement":{"type":"ElseStatementNode","statement":{"type":"IfStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"weDetectNewInput","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"statement":{"type":"BlockNode","statements":[{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"labels":[]}],"labels":[],"comments":[]},"elseStatement":{"type":"ElseStatementNode","statement":{"type":"BlockNode","statements":[{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"doSomethingBoring","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"labels":[]},{"type":"IfStatementNode","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"weDetectCoolInput","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"statement":{"type":"BlockNode","statements":[{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"doSomethingCool","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"labels":[]},{"type":"ContinueStatementNode","labels":[],"comments":[]}],"labels":[],"comments":[]},"labels":[],"comments":[]},{"type":"ReturnStatementNode","labels":[],"comments":[]}],"labels":[],"comments":[]},"labels":[],"comments":[]},"labels":[],"comments":[]},"labels":[],"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]},"labels":[],"comments":[]},{"type":"ReturnStatementNode","labels":[],"comments":[]}],"labels":[],"comments":[]},"comments":[]}]}]},{"type":"NaturalLanguageTaggedUnit","id":"10000810-u8","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Now you see where this is going. It is difficult to understand where we jump or what's going on at a single glance."}]},"rawText":"Now you see where this is going. It is difficult to understand where we jump or what's going on at a single glance.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Now you see where this is going. It is difficult to understand where we jump or what's going on at a single glance."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"singl":1,"jump":1,"understand":1,"difficult":1,"glanc":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":74.80500000000002,"fleshKincaidGradeLevel":5.806666666666668,"automatedReadingIndex":2.428750000000001,"gunningFogIndex":6.466666666666668,"smogIndex":6.872983346207417,"colemanLiauIndex":4.032916666666665}]}]},{"type":"StackOverflowAnswer","id":10001320,"questionId":10000468,"comments":[],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","score":1,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":384706,"displayName":"Cratylus","reputation":24193},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001320-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"If the objective is clean code and readability, IMHO the best approach is quit a function on the spot i.e. return in any place meeting a condition instead of having a single return in the end.  "}]},"rawText":"If the objective is clean code and readability, IMHO the best approach is quit a function on the spot i.e. return in any place meeting a condition instead of having a single return in the end.  ","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"If the objective is clean code and readability, IMHO the best approach is quit a function on the spot i.e. "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"return"}]},{"type":"XmlTextNode","contents":" in any place meeting a condition instead of having a single "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"return"}]},{"type":"XmlTextNode","contents":" in the end.  "}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"singl":1,"condit":1,"clean":1,"object":1,"quit":1,"code":1,"imho":1,"readabl":1,"function":1,"spot":1,"approach":1,"end":1,"place":1,"meet":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":45.74500000000003,"fleshKincaidGradeLevel":15.822222222222226,"automatedReadingIndex":16.84916666666667,"gunningFogIndex":15.511111111111113,"smogIndex":8.477225575051662,"colemanLiauIndex":8.726388888888888}]},{"type":"NaturalLanguageTaggedUnit","id":"10001320-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"And this is perhaps not obvious in trivial examples of functions but in functions that do really complicated work, for me 1)it is easier to understand what is going on 2) it is easier to read 3) IMO it is less error prone- many times there has been a bug detected and a fix is needed ASAP. If you keep one return in the end, I have seen many times that a \"quick and dirty\" fix may break the code.  "}]},"rawText":"And this is perhaps not obvious in trivial examples of functions but in functions that do really complicated work, for me 1)it is easier to understand what is going on 2) it is easier to read 3) IMO it is less error prone- many times there has been a bug detected and a fix is needed ASAP. If you keep one return in the end, I have seen many times that a \"quick and dirty\" fix may break the code.  ","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"And this is perhaps not obvious in trivial examples of functions but in functions that do really complicated work, for me 1)it is easier to understand what is going on 2) it is easier to read 3) IMO it is less error prone- many times there has been a bug detected and a fix is needed ASAP. If you keep one "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"return"}]},{"type":"XmlTextNode","contents":" in the end, I have seen many times that a \"quick and dirty\" fix may break the code.  "}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"read":1,"imo":1,"detect":1,"exampl":1,"complic":1,"obvious":1,"asap":1,"understand":1,"fix":2,"prone":1,"work":1,"code":1,"easier":2,"need":1,"error":1,"bug":1,"function":2,"end":1,"quick":1,"time":2,"dirti":1,"trivial":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":57.1052777777778,"fleshKincaidGradeLevel":15.355617283950618,"automatedReadingIndex":16.671481481481486,"gunningFogIndex":16.69382716049383,"smogIndex":6.872983346207417,"colemanLiauIndex":5.783086419753083}]},{"type":"NaturalLanguageTaggedUnit","id":"10001320-u2","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"But this is my personal opinion."}]},"rawText":"But this is my personal opinion.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"But this is my personal opinion."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"opinion":1,"person":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":73.84500000000001,"fleshKincaidGradeLevel":4.450000000000003,"automatedReadingIndex":1.9800000000000004,"gunningFogIndex":2.4000000000000004,"smogIndex":3.0,"colemanLiauIndex":4.723333333333329}]}]},{"type":"StackOverflowAnswer","id":10001984,"questionId":10000468,"comments":[],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","score":2,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":1311394,"displayName":"ach","reputation":2611},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001984-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Since I can't yet comment on other answers, I'm forced to post a new one. I would be very careful about saying that any philosophy is \"always\" correct. It's all about trade-offs. If adding a second return statement helps you to avoid unnecessary use of break statements and boolean flags to manage your program flow, it is probably the right thing to do."}]},"rawText":"Since I can't yet comment on other answers, I'm forced to post a new one. I would be very careful about saying that any philosophy is \"always\" correct. It's all about trade-offs. If adding a second return statement helps you to avoid unnecessary use of break statements and boolean flags to manage your program flow, it is probably the right thing to do.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Since I can't yet comment on other answers, I'm forced to post a new one. I would be very careful about saying that any philosophy is \"always\" correct. It's all about trade-offs. If adding a second return statement helps you to avoid unnecessary use of break statements and boolean flags to manage your program flow, it is probably the right thing to do."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"program":1,"philosophi":1,"post":1,"off":1,"correct":1,"thing":1,"trade":1,"care":1,"statement":2,"avoid":1,"help":1,"flow":1,"comment":1,"flag":1,"answer":1,"ad":1,"forc":1,"manag":1,"unnecessari":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":70.8784090909091,"fleshKincaidGradeLevel":7.472272727272728,"automatedReadingIndex":7.087272727272726,"gunningFogIndex":7.8121212121212125,"smogIndex":6.872983346207417,"colemanLiauIndex":7.726666666666667}]},{"type":"NaturalLanguageTaggedUnit","id":"10001984-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"However, others commenters are correct in suggesting that a web of return statements, breaks, and flags are a \"code smell\" -- see if your methods can be broken down into smaller, more modular pieces."}]},"rawText":"However, others commenters are correct in suggesting that a web of return statements, breaks, and flags are a \"code smell\" -- see if your methods can be broken down into smaller, more modular pieces.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"However, others commenters are correct in suggesting that a web of return statements, breaks, and flags are a \"code smell\" -- see if your methods can be broken down into smaller, more modular pieces."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"method":1,"break":1,"modular":1,"suggest":1,"correct":1,"statement":1,"code":1,"web":1,"smell":1,"comment":1,"flag":1,"piec":1,"smaller":1,"broken":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":40.03090909090909,"fleshKincaidGradeLevel":15.873939393939395,"automatedReadingIndex":17.478181818181817,"gunningFogIndex":13.200000000000001,"smogIndex":3.0,"colemanLiauIndex":11.313030303030299}]}]}]}