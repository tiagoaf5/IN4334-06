{"type":"StackOverflowArtifact","question":{"type":"StackOverflowQuestion","id":10001186,"title":"Lottery match exercise","comments":[{"type":"StackOverflowComment","id":12784580,"postId":10001186,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":212211,"displayName":"ring bearer","reputation":10308},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001186-c12784580-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Are you trying to check if a given lottery number contains any digit of the winning number ?"}]},"rawText":"Are you trying to check if a given lottery number contains any digit of the winning number ?","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"Are you trying to check if a given lottery number contains any digit of the winning number ?"}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"number":2,"win":1,"lotteri":1,"check":1,"digit":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":60.19176470588238,"fleshKincaidGradeLevel":9.08705882352941,"automatedReadingIndex":7.572352941176469,"gunningFogIndex":6.800000000000001,"smogIndex":3.0,"colemanLiauIndex":8.07411764705882}]}]},{"type":"StackOverflowComment","id":12784470,"postId":10001186,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":104950,"displayName":"Amir Afghani","reputation":20550},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001186-c12784470-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"I don't understand why your algorithm needs to be so complex. Once you have the winning numbers, why can't you just iterate all candidates and use the List "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"containsAll","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":" method? This would mean taking the "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"lottoDrawString","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":" and converting it into a List\n"}]},"rawText":"I don't understand why your algorithm needs to be so complex. Once you have the winning numbers, why can't you just iterate all candidates and use the List containsAll method? This would mean taking the lottoDrawString and converting it into a List\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"I don't understand why your algorithm needs to be so complex. Once you have the winning numbers, why can't you just iterate all candidates and use the List containsAll method? This would mean taking the lottoDrawString and converting it into a List\n"}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"number":1,"method":1,"win":1,"lotto":1,"understand":1,"candid":1,"draw":1,"algorithm":1,"take":1,"iter":1,"convert":1,"list":2,"complex":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"containsAll","comments":[]},{"type":"IdentifierNode","name":"lottoDrawString","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":63.12560606060609,"fleshKincaidGradeLevel":8.098181818181818,"automatedReadingIndex":7.740606060606062,"gunningFogIndex":5.866666666666667,"smogIndex":3.0,"colemanLiauIndex":9.462727272727271}]},{"type":"NaturalLanguageTaggedUnit","id":"10001186-c12784470-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"\n , which is pretty simple.\n"}]},"rawText":"\n , which is pretty simple.\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"integer"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"\n , which is pretty simple.\n"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"pretti":1,"simpl":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":75.87500000000001,"fleshKincaidGradeLevel":3.6700000000000017,"automatedReadingIndex":2.942499999999999,"gunningFogIndex":1.6,"smogIndex":3.0,"colemanLiauIndex":4.677499999999998}]}]},{"type":"StackOverflowComment","id":12784234,"postId":10001186,"creationDate":"2012-04-03","score":1,"isEdited":false,"owner":{"type":"StackOverflowUser","id":212211,"displayName":"ring bearer","reputation":10308},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001186-c12784234-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Can't help but quote Linus Torvalds here \"If you need more than 3 levels of indentation, you're screwed anyway, and should fix your program.\" . Ok with what I understand, you are doing a lot of heavy lifting in code, can you create a JOIN query in order to check this?"}]},"rawText":"Can't help but quote Linus Torvalds here \"If you need more than 3 levels of indentation, you're screwed anyway, and should fix your program.\" . Ok with what I understand, you are doing a lot of heavy lifting in code, can you create a JOIN query in order to check this?","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"Can't help but quote Linus Torvalds here \"If you need more than 3 levels of indentation, you're screwed anyway, and should fix your program.\" . Ok with what I understand, you are doing a lot of heavy lifting in code, can you create a JOIN query in order to check this?"}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"program":1,"indent":1,"join":1,"understand":1,"fix":1,"linus":1,"code":1,"queri":1,"check":1,"order":1,"torvald":1,"lot":1,"heavi":1,"quot":1,"creat":1,"lift":1,"screw":1,"level":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":64.93346153846157,"fleshKincaidGradeLevel":10.661538461538463,"automatedReadingIndex":10.500576923076924,"gunningFogIndex":11.16923076923077,"smogIndex":6.872983346207417,"colemanLiauIndex":6.719423076923075}]}]},{"type":"StackOverflowComment","id":12784209,"postId":10001186,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":1291492,"displayName":"ControlAltDel","reputation":12486},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001186-c12784209-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"query the db for the row with the winning numbers"}]},"rawText":"query the db for the row with the winning numbers","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"query the db for the row with the winning numbers"}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"queri":1,"win":1,"number":1,"row":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":95.165,"fleshKincaidGradeLevel":2.4700000000000024,"automatedReadingIndex":2.41,"gunningFogIndex":4.0,"smogIndex":3.0,"colemanLiauIndex":4.759999999999998}]}]}],"tags":["java"],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","score":1,"viewCount":406,"owner":{"type":"StackOverflowUser","id":715540,"displayName":"Arianule","reputation":1784},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001186-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"I have been busy with a exercise where I need to compare a winning lottery number(which is generated) with existing lottery numbers in a database table. "}]},"rawText":"I have been busy with a exercise where I need to compare a winning lottery number(which is generated) with existing lottery numbers in a database table. ","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"I have been busy with a exercise where I need to compare a winning lottery number(which is generated) with existing lottery numbers in a database table. "}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"number":2,"win":1,"exist":1,"lotteri":2,"tabl":1,"busi":1,"compar":1,"exercis":1,"generat":1,"databas":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":54.09666666666668,"fleshKincaidGradeLevel":12.421481481481482,"automatedReadingIndex":13.70111111111111,"gunningFogIndex":12.281481481481482,"smogIndex":8.477225575051662,"colemanLiauIndex":10.139259259259259}]},{"type":"NaturalLanguageTaggedUnit","id":"10001186-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"I manage to loop through all the numbers in the database and subsequently find matches with the winning set of numbers but am struggling to pinpoint in which set of lottery numbers the match was found.\nThe numbers were placed individually in each database column.\nHere I retrieve the values in each row."}]},"rawText":"I manage to loop through all the numbers in the database and subsequently find matches with the winning set of numbers but am struggling to pinpoint in which set of lottery numbers the match was found.\nThe numbers were placed individually in each database column.\nHere I retrieve the values in each row.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"I manage to loop through all the numbers in the database and subsequently find matches with the winning set of numbers but am struggling to pinpoint in which set of lottery numbers the match was found."},{"type":"XmlSingleNode","name":{"type":"XmlNameNode","value":"br"},"attributes":[]},{"type":"XmlTextNode","contents":"\nThe numbers were placed individually in each database column.\nHere I retrieve the values in each row."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"number":4,"find":1,"win":1,"loop":1,"subsequ":1,"retriev":1,"set":2,"individu":1,"lotteri":1,"pinpoint":1,"row":1,"match":2,"found":1,"struggl":1,"valu":1,"column":1,"databas":2,"manag":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":70.78257861635221,"fleshKincaidGradeLevel":7.775471698113208,"automatedReadingIndex":9.4425786163522,"gunningFogIndex":8.576100628930819,"smogIndex":7.47213595499958,"colemanLiauIndex":10.062641509433963}]},{"type":"CodeTaggedUnit","id":"10001186-u2","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"BlockNode","statements":[{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"set","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"state","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"executeQuery","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\"SELECT * FROM numberLotto\""},"comments":[]}],"comments":[]},"comments":[]}},"comments":[]},"varType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"ResultSet","comments":[]},"comments":[]}],"comments":[]}}],"comments":[]},"labels":[],"comments":[]},{"type":"WhileStatementNode","expression":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"set","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"next","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"statement":{"type":"BlockNode","statements":[{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"row","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"ArrayExpressionCreatorNode","creatorType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"comments":[]}],"comments":[]},"expressionDepth":[{"type":"DimExpressionNode","argument":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"7"},"comments":[]},"comments":[]}],"arrayDepth":[],"comments":[]}},"comments":[]},"varType":{"type":"ArrayTypeNode","typeNode":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"comments":[]}],"comments":[]},"depth":[{"type":"ArrayDimensionNode","comments":[]}]}}],"comments":[]},"labels":[],"comments":[]},{"type":"ExpressionStatement","expression":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"=","comments":[]},"left":{"type":"ArrayAccessSelectorNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"row","comments":[]}],"comments":[]},"dimExpression":{"type":"DimExpressionNode","argument":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]},"comments":[]},"comments":[]},"right":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"set","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"getString","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"1"},"comments":[]}],"comments":[]},"comments":[]},"comments":[]},"labels":[]},{"type":"ExpressionStatement","expression":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"=","comments":[]},"left":{"type":"ArrayAccessSelectorNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"row","comments":[]}],"comments":[]},"dimExpression":{"type":"DimExpressionNode","argument":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"1"},"comments":[]},"comments":[]},"comments":[]},"right":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"set","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"getString","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"2"},"comments":[]}],"comments":[]},"comments":[]},"comments":[]},"labels":[]},{"type":"ExpressionStatement","expression":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"=","comments":[]},"left":{"type":"ArrayAccessSelectorNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"row","comments":[]}],"comments":[]},"dimExpression":{"type":"DimExpressionNode","argument":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"2"},"comments":[]},"comments":[]},"comments":[]},"right":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"set","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"getString","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"3"},"comments":[]}],"comments":[]},"comments":[]},"comments":[]},"labels":[]},{"type":"ExpressionStatement","expression":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"=","comments":[]},"left":{"type":"ArrayAccessSelectorNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"row","comments":[]}],"comments":[]},"dimExpression":{"type":"DimExpressionNode","argument":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"3"},"comments":[]},"comments":[]},"comments":[]},"right":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"set","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"getString","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"4"},"comments":[]}],"comments":[]},"comments":[]},"comments":[]},"labels":[]},{"type":"ExpressionStatement","expression":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"=","comments":[]},"left":{"type":"ArrayAccessSelectorNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"row","comments":[]}],"comments":[]},"dimExpression":{"type":"DimExpressionNode","argument":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"4"},"comments":[]},"comments":[]},"comments":[]},"right":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"set","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"getString","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"5"},"comments":[]}],"comments":[]},"comments":[]},"comments":[]},"labels":[]},{"type":"ExpressionStatement","expression":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"=","comments":[]},"left":{"type":"ArrayAccessSelectorNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"row","comments":[]}],"comments":[]},"dimExpression":{"type":"DimExpressionNode","argument":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"5"},"comments":[]},"comments":[]},"comments":[]},"right":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"set","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"getString","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"6"},"comments":[]}],"comments":[]},"comments":[]},"comments":[]},"labels":[]},{"type":"ExpressionStatement","expression":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"=","comments":[]},"left":{"type":"ArrayAccessSelectorNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"row","comments":[]}],"comments":[]},"dimExpression":{"type":"DimExpressionNode","argument":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"6"},"comments":[]},"comments":[]},"comments":[]},"right":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"set","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"getString","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"7"},"comments":[]}],"comments":[]},"comments":[]},"comments":[]},"labels":[]},{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"entries","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"add","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"row","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},"labels":[]}],"labels":[],"comments":[]},"labels":[],"comments":[]},{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"listOfNumbers","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"entries","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"toArray","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"ArrayExpressionCreatorNode","creatorType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"comments":[]}],"comments":[]},"expressionDepth":[{"type":"DimExpressionNode","argument":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"entries","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"size","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"comments":[]},{"type":"DimExpressionNode","argument":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"7"},"comments":[]},"comments":[]}],"arrayDepth":[],"comments":[]}],"comments":[]},"comments":[]}},"comments":[]},"varType":{"type":"ArrayTypeNode","typeNode":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"comments":[]}],"comments":[]},"depth":[{"type":"ArrayDimensionNode","comments":[]},{"type":"ArrayDimensionNode","comments":[]}]}}],"comments":[]},"labels":[],"comments":[]}],"labels":[],"comments":[]}]},"rawText":"ResultSet set = state.executeQuery(\"SELECT * FROM numberLotto\");\n    while(set.next())\n    {\n                String[]row = new String[7]; \n                row[0] = set.getString(1);                   \n                row[1] = set.getString(2);\n                row[2] = set.getString(3);\n                row[3] = set.getString(4);\n                row[4] = set.getString(5);\n                row[5] = set.getString(6);\n                row[6] = set.getString(7);\n                entries.add(row);\n            }\nString[][]listOfNumbers = entries.toArray(new String[entries.size()][7]);\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"ResultSet set = state.executeQuery(\"SELECT * FROM numberLotto\");\n    while(set.next())\n    {\n                String[]row = new String[7]; \n                row[0] = set.getString(1);                   \n                row[1] = set.getString(2);\n                row[2] = set.getString(3);\n                row[3] = set.getString(4);\n                row[4] = set.getString(5);\n                row[5] = set.getString(6);\n                row[6] = set.getString(7);\n                entries.add(row);\n            }\nString[][]listOfNumbers = entries.toArray(new String[entries.size()][7]);\n"}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"number":2,"size":1,"lotto":1,"state":1,"result":1,"set":10,"row":9,"select":1,"array":1,"entri":3,"queri":1,"add":1,"execut":1,"list":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"ResultSet","comments":[]},"comments":[]}],"comments":[]},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"comments":[]}],"comments":[]},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"comments":[]}],"comments":[]},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"state","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"executeQuery","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\"SELECT * FROM numberLotto\""},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"set","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"next","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"set","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"getString","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"1"},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"set","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"getString","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"2"},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"set","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"getString","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"3"},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"set","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"getString","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"4"},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"set","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"getString","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"5"},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"set","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"getString","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"6"},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"set","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"getString","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"7"},"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"entries","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"add","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"row","comments":[]}],"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"entries","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"toArray","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"ArrayExpressionCreatorNode","creatorType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"comments":[]}],"comments":[]},"expressionDepth":[{"type":"DimExpressionNode","argument":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"entries","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"size","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"comments":[]},{"type":"DimExpressionNode","argument":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"7"},"comments":[]},"comments":[]}],"arrayDepth":[],"comments":[]}],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"entries","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"size","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"set","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"state","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"executeQuery","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"LiteralNode","node":{"type":"StringLiteralNode","valueRep":"\"SELECT * FROM numberLotto\""},"comments":[]}],"comments":[]},"comments":[]}},"comments":[]},"varType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"ResultSet","comments":[]},"comments":[]}],"comments":[]}},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"row","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"ArrayExpressionCreatorNode","creatorType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"comments":[]}],"comments":[]},"expressionDepth":[{"type":"DimExpressionNode","argument":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"7"},"comments":[]},"comments":[]}],"arrayDepth":[],"comments":[]}},"comments":[]},"varType":{"type":"ArrayTypeNode","typeNode":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"comments":[]}],"comments":[]},"depth":[{"type":"ArrayDimensionNode","comments":[]}]}},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"listOfNumbers","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"entries","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"toArray","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"ArrayExpressionCreatorNode","creatorType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"comments":[]}],"comments":[]},"expressionDepth":[{"type":"DimExpressionNode","argument":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"entries","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"size","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},"comments":[]},{"type":"DimExpressionNode","argument":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"7"},"comments":[]},"comments":[]}],"arrayDepth":[],"comments":[]}],"comments":[]},"comments":[]}},"comments":[]},"varType":{"type":"ArrayTypeNode","typeNode":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"String","comments":[]},"comments":[]}],"comments":[]},"depth":[{"type":"ArrayDimensionNode","comments":[]},{"type":"ArrayDimensionNode","comments":[]}]}}]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"set","comments":[]},{"type":"IdentifierNode","name":"state","comments":[]},{"type":"IdentifierNode","name":"executeQuery","comments":[]},{"type":"IdentifierNode","name":"ResultSet","comments":[]},{"type":"IdentifierNode","name":"set","comments":[]},{"type":"IdentifierNode","name":"next","comments":[]},{"type":"IdentifierNode","name":"row","comments":[]},{"type":"IdentifierNode","name":"String","comments":[]},{"type":"IdentifierNode","name":"String","comments":[]},{"type":"IdentifierNode","name":"row","comments":[]},{"type":"IdentifierNode","name":"set","comments":[]},{"type":"IdentifierNode","name":"getString","comments":[]},{"type":"IdentifierNode","name":"row","comments":[]},{"type":"IdentifierNode","name":"set","comments":[]},{"type":"IdentifierNode","name":"getString","comments":[]},{"type":"IdentifierNode","name":"row","comments":[]},{"type":"IdentifierNode","name":"set","comments":[]},{"type":"IdentifierNode","name":"getString","comments":[]},{"type":"IdentifierNode","name":"row","comments":[]},{"type":"IdentifierNode","name":"set","comments":[]},{"type":"IdentifierNode","name":"getString","comments":[]},{"type":"IdentifierNode","name":"row","comments":[]},{"type":"IdentifierNode","name":"set","comments":[]},{"type":"IdentifierNode","name":"getString","comments":[]},{"type":"IdentifierNode","name":"row","comments":[]},{"type":"IdentifierNode","name":"set","comments":[]},{"type":"IdentifierNode","name":"getString","comments":[]},{"type":"IdentifierNode","name":"row","comments":[]},{"type":"IdentifierNode","name":"set","comments":[]},{"type":"IdentifierNode","name":"getString","comments":[]},{"type":"IdentifierNode","name":"entries","comments":[]},{"type":"IdentifierNode","name":"add","comments":[]},{"type":"IdentifierNode","name":"row","comments":[]},{"type":"IdentifierNode","name":"listOfNumbers","comments":[]},{"type":"IdentifierNode","name":"entries","comments":[]},{"type":"IdentifierNode","name":"toArray","comments":[]},{"type":"IdentifierNode","name":"String","comments":[]},{"type":"IdentifierNode","name":"entries","comments":[]},{"type":"IdentifierNode","name":"size","comments":[]},{"type":"IdentifierNode","name":"String","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]}]},{"type":"NaturalLanguageTaggedUnit","id":"10001186-u3","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"I then loop through "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"listOfNumbers","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":" and compare all the values with the values of "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"winningNumber","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"."}]},"rawText":"I then loop through listOfNumbers and compare all the values with the values of winningNumber.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"I then loop through listOfNumbers and compare all the values with the values of winningNumber."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"number":2,"win":1,"loop":1,"compar":1,"valu":2,"list":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"listOfNumbers","comments":[]},{"type":"IdentifierNode","name":"winningNumber","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":73.17000000000002,"fleshKincaidGradeLevel":6.780000000000001,"automatedReadingIndex":10.875999999999998,"gunningFogIndex":6.0,"smogIndex":3.0,"colemanLiauIndex":13.220666666666666}]},{"type":"CodeTaggedUnit","id":"10001186-u4","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"winningNumber","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"lottoDrawString","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"toArray","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]}},"comments":[]},"varType":{"type":"ArrayTypeNode","typeNode":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Object","comments":[]},"comments":[]}],"comments":[]},"depth":[{"type":"ArrayDimensionNode","comments":[]}]}}],"comments":[]},"labels":[],"comments":[]},{"type":"TextFragmentNode","text":"for ("},{"type":"BlockNode","statements":[{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"i","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}},"comments":[]},"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}}],"comments":[]},"labels":[],"comments":[]},{"type":"ExpressionStatement","expression":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"<","comments":[]},"left":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]},"right":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"listOfNumbers","comments":[]},{"type":"IdentifierNode","name":"length","comments":[]}],"comments":[]},"comments":[]},"labels":[]}],"labels":[],"comments":[]},{"type":"TextFragmentNode","text":"i++)\n        {\n            for ("},{"type":"BlockNode","statements":[{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"j","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}},"comments":[]},"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}}],"comments":[]},"labels":[],"comments":[]},{"type":"ExpressionStatement","expression":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"<","comments":[]},"left":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"j","comments":[]}],"comments":[]},"right":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":".","comments":[]},"left":{"type":"ArrayAccessSelectorNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"listOfNumbers","comments":[]}],"comments":[]},"dimExpression":{"type":"DimExpressionNode","argument":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"i","comments":[]}],"comments":[]},"comments":[]},"comments":[]},"right":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"length","comments":[]}],"comments":[]},"comments":[]},"comments":[]},"labels":[]}],"labels":[],"comments":[]},{"type":"TextFragmentNode","text":"j++)\n            {\n                for("},{"type":"BlockNode","statements":[{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"k","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}},"comments":[]},"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}}],"comments":[]},"labels":[],"comments":[]},{"type":"ExpressionStatement","expression":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"<","comments":[]},"left":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"k","comments":[]}],"comments":[]},"right":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"winningNumber","comments":[]},{"type":"IdentifierNode","name":"length","comments":[]}],"comments":[]},"comments":[]},"labels":[]}],"labels":[],"comments":[]},{"type":"TextFragmentNode","text":"k++)\n                {\n                    System.out.println("},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"listOfNumbers","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"[i][j]);\n\n                    if("},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"listOfNumbers","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"[i][j]."},{"type":"ExpressionStatement","expression":{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"equals","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"ArrayAccessSelectorNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"winningNumber","comments":[]}],"comments":[]},"dimExpression":{"type":"DimExpressionNode","argument":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"k","comments":[]}],"comments":[]},"comments":[]},"comments":[]}],"comments":[]},"comments":[]},"labels":[]},{"type":"TextFragmentNode","text":")\n                    {\n                        System.out.println(\"There is a match \" + "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"listOfNumbers","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"[i][j] + \" and \" + "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"winningNumber","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"[k]);\n                    }\n                }\n\n            }\n        }\n"}]},"rawText":"Object[]winningNumber = lottoDrawString.toArray();   \n\n        for (int i=0; i < listOfNumbers.length; i++)\n        {\n            for (int j=0; j < listOfNumbers[i].length; j++)\n            {\n                for(int k = 0; k < winningNumber.length; k++)\n                {\n                    System.out.println(listOfNumbers[i][j]);\n\n                    if(listOfNumbers[i][j].equals(winningNumber[k]))\n                    {\n                        System.out.println(\"There is a match \" + listOfNumbers[i][j] + \" and \" + winningNumber[k]);\n                    }\n                }\n\n            }\n        }\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Object[]winningNumber = lottoDrawString.toArray();   \n\n        for (int i=0; i < listOfNumbers.length; i++)\n        {\n            for (int j=0; j < listOfNumbers[i].length; j++)\n            {\n                for(int k = 0; k < winningNumber.length; k++)\n                {\n                    System.out.println(listOfNumbers[i][j]);\n\n                    if(listOfNumbers[i][j].equals(winningNumber[k]))\n                    {\n                        System.out.println(\"There is a match \" + listOfNumbers[i][j] + \" and \" + winningNumber[k]);\n                    }\n                }\n\n            }\n        }\n"}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"number":9,"win":4,"system":2,"lotto":1,"println":2,"object":1,"match":1,"array":1,"draw":1,"equal":1,"length":3,"list":5}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Object","comments":[]},"comments":[]}],"comments":[]},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Object","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[{"type":"PrimitiveTypeNode","name":"int","comments":[]}]},{"type":"CodeInvocationMetaInformation","invocations":[{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"lottoDrawString","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"toArray","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]},{"type":"MethodInvocationNode","identifier":{"type":"IdentifierNode","name":"equals","comments":[]},"args":{"type":"ExpressionListNode","arguments":[{"type":"ArrayAccessSelectorNode","identifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"winningNumber","comments":[]}],"comments":[]},"dimExpression":{"type":"DimExpressionNode","argument":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"k","comments":[]}],"comments":[]},"comments":[]},"comments":[]}],"comments":[]},"comments":[]}]},{"type":"CodeVariablesMetaInformation","variables":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"winningNumber","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"MethodInvocationNode","qualifiedIdentifier":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"lottoDrawString","comments":[]}],"comments":[]},"identifier":{"type":"IdentifierNode","name":"toArray","comments":[]},"args":{"type":"ExpressionListNode","arguments":[],"comments":[]},"comments":[]}},"comments":[]},"varType":{"type":"ArrayTypeNode","typeNode":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"Object","comments":[]},"comments":[]}],"comments":[]},"depth":[{"type":"ArrayDimensionNode","comments":[]}]}},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"i","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}},"comments":[]},"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"j","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}},"comments":[]},"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"k","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"IntegerLiteralNode","valueRep":"0"},"comments":[]}},"comments":[]},"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}}]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"winningNumber","comments":[]},{"type":"IdentifierNode","name":"lottoDrawString","comments":[]},{"type":"IdentifierNode","name":"toArray","comments":[]},{"type":"IdentifierNode","name":"Object","comments":[]},{"type":"IdentifierNode","name":"i","comments":[]},{"type":"IdentifierNode","name":"i","comments":[]},{"type":"IdentifierNode","name":"listOfNumbers","comments":[]},{"type":"IdentifierNode","name":"length","comments":[]},{"type":"IdentifierNode","name":"j","comments":[]},{"type":"IdentifierNode","name":"j","comments":[]},{"type":"IdentifierNode","name":"listOfNumbers","comments":[]},{"type":"IdentifierNode","name":"i","comments":[]},{"type":"IdentifierNode","name":"length","comments":[]},{"type":"IdentifierNode","name":"k","comments":[]},{"type":"IdentifierNode","name":"k","comments":[]},{"type":"IdentifierNode","name":"winningNumber","comments":[]},{"type":"IdentifierNode","name":"length","comments":[]},{"type":"IdentifierNode","name":"listOfNumbers","comments":[]},{"type":"IdentifierNode","name":"listOfNumbers","comments":[]},{"type":"IdentifierNode","name":"equals","comments":[]},{"type":"IdentifierNode","name":"winningNumber","comments":[]},{"type":"IdentifierNode","name":"k","comments":[]},{"type":"IdentifierNode","name":"listOfNumbers","comments":[]},{"type":"IdentifierNode","name":"winningNumber","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]}]},{"type":"NaturalLanguageTaggedUnit","id":"10001186-u5","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"How can I retrieve the row where the match(es) were found?"}]},"rawText":"How can I retrieve the row where the match(es) were found?","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"How can I retrieve the row where the match(es) were found?"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"match":1,"found":1,"retriev":1,"row":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":103.00500000000001,"fleshKincaidGradeLevel":1.8733333333333313,"automatedReadingIndex":2.2325000000000017,"gunningFogIndex":4.800000000000001,"smogIndex":3.0,"colemanLiauIndex":3.7875000000000014}]},{"type":"NaturalLanguageTaggedUnit","id":"10001186-u6","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"kind regards"}]},"rawText":"kind regards","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"kind regards"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"kind":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":77.90500000000002,"fleshKincaidGradeLevel":2.890000000000004,"automatedReadingIndex":5.475000000000001,"gunningFogIndex":0.8,"smogIndex":3.0,"colemanLiauIndex":1.5949999999999953}]}]},"answers":[{"type":"StackOverflowAnswer","id":10001308,"questionId":10001186,"comments":[{"type":"StackOverflowComment","id":12791883,"postId":10001308,"creationDate":"2012-04-04","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":715540,"displayName":"Arianule","reputation":1784},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001308-c12791883-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"The problem I see with that is there can be many possible matches of three. Say I have number 4 7 13 23 27 33 4, 4,7,13 can match the ticket, 13, 23, 27 can match...etc. etc."}]},"rawText":"The problem I see with that is there can be many possible matches of three. Say I have number 4 7 13 23 27 33 4, 4,7,13 can match the ticket, 13, 23, 27 can match...etc. etc.","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"The problem I see with that is there can be many possible matches of three. Say I have number 4 7 13 23 27 33 4, 4,7,13 can match the ticket, 13, 23, 27 can match...etc. etc."}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"match":3,"number":1,"ticket":1,"problem":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":114.08157894736844,"fleshKincaidGradeLevel":2.067368421052631,"automatedReadingIndex":4.183157894736841,"gunningFogIndex":7.6000000000000005,"smogIndex":3.0,"colemanLiauIndex":2.7710526315789465}]}]},{"type":"StackOverflowComment","id":12784339,"postId":10001308,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":163085,"displayName":"py_script","reputation":340},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001308-c12784339-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Good point, too"}]},"rawText":"Good point, too","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"Good point, too"}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"point":1,"good":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":119.19000000000003,"fleshKincaidGradeLevel":-2.619999999999999,"automatedReadingIndex":-1.0899999999999999,"gunningFogIndex":1.2000000000000002,"smogIndex":3.0,"colemanLiauIndex":-2.240000000000002}]}]}],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","score":2,"isAccepted":true,"owner":{"type":"StackOverflowUser","id":1064659,"displayName":"Taymon","reputation":9726},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001308-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Why not just do"}]},"rawText":"Why not just do","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Why not just do"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":118.17500000000001,"fleshKincaidGradeLevel":-2.2299999999999986,"automatedReadingIndex":-5.300000000000001,"gunningFogIndex":1.6,"smogIndex":3.0,"colemanLiauIndex":-5.630000000000003}]},{"type":"CodeTaggedUnit","id":"10001308-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"SELECT * FROM "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"numberLotto","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":" WHERE "},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"FirstNumber","comments":[]},"comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"= n1 AND "},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"SecondNumber","comments":[]},"comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"= n2 AND ...\n"}]},"rawText":"SELECT * FROM numberLotto WHERE FirstNumber = n1 AND SecondNumber = n2 AND ...\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"SELECT * FROM numberLotto WHERE FirstNumber = n1 AND SecondNumber = n2 AND ...\n"}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"lotto":1,"number":3,"select":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"FirstNumber","comments":[]},"comments":[]}],"comments":[]},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"SecondNumber","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"numberLotto","comments":[]},{"type":"IdentifierNode","name":"FirstNumber","comments":[]},{"type":"IdentifierNode","name":"SecondNumber","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]}]},{"type":"NaturalLanguageTaggedUnit","id":"10001308-u2","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"For that matter, why not just store the lotto numbers as a seven-digit string in the database?"}]},"rawText":"For that matter, why not just store the lotto numbers as a seven-digit string in the database?","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"For that matter, why not just store the lotto numbers as a seven-digit string in the database?"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"number":1,"lotto":1,"store":1,"databas":1,"matter":1,"digit":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":70.14470588235297,"fleshKincaidGradeLevel":7.698823529411765,"automatedReadingIndex":8.126470588235296,"gunningFogIndex":9.15294117647059,"smogIndex":8.477225575051662,"colemanLiauIndex":8.76705882352941}]}]},{"type":"StackOverflowAnswer","id":10001316,"questionId":10001186,"comments":[{"type":"StackOverflowComment","id":12784395,"postId":10001316,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":163085,"displayName":"py_script","reputation":340},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001316-c12784395-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"True, I will edit the post"}]},"rawText":"True, I will edit the post","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"True, I will edit the post"}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"edit":1,"post":1,"true":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":102.04500000000002,"fleshKincaidGradeLevel":0.5166666666666693,"automatedReadingIndex":-2.729999999999997,"gunningFogIndex":2.4000000000000004,"smogIndex":3.0,"colemanLiauIndex":-1.1666666666666679}]}]},{"type":"StackOverflowComment","id":12784367,"postId":10001316,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":1064659,"displayName":"Taymon","reputation":9726},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001316-c12784367-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"What makes you think there's only one column? It looks to me like there are at least eight columns."}]},"rawText":"What makes you think there's only one column? It looks to me like there are at least eight columns.","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"What makes you think there's only one column? It looks to me like there are at least eight columns."}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"column":2,"make":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":99.39500000000001,"fleshKincaidGradeLevel":1.879999999999999,"automatedReadingIndex":2.174500000000002,"gunningFogIndex":4.0,"smogIndex":3.0,"colemanLiauIndex":4.465499999999999}]}]}],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","score":0,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":163085,"displayName":"py_script","reputation":340},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001316-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"One idea could be to add the line number as table field, retrieve it, and instead of creating and checking numbers, do it with an object, lets say Loterry. "}]},"rawText":"One idea could be to add the line number as table field, retrieve it, and instead of creating and checking numbers, do it with an object, lets say Loterry. ","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"One idea could be to add the line number as table field, retrieve it, and instead of creating and checking numbers, do it with an object, lets say Loterry. "}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"number":2,"loterri":1,"field":1,"line":1,"retriev":1,"idea":1,"object":1,"tabl":1,"check":1,"creat":1,"add":1,"let":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":66.5448275862069,"fleshKincaidGradeLevel":11.182068965517242,"automatedReadingIndex":12.884482758620685,"gunningFogIndex":11.600000000000001,"smogIndex":3.0,"colemanLiauIndex":7.944137931034479}]},{"type":"NaturalLanguageTaggedUnit","id":"10001316-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"ClassDeclarationNode","modifiers":[],"identifier":{"type":"IdentifierNode","name":"Lottery","comments":[]},"labels":[],"comments":[]}]},"rawText":"class Lottery","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"class Lottery"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"lotteri":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"Lottery","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":77.90500000000002,"fleshKincaidGradeLevel":2.890000000000004,"automatedReadingIndex":7.829999999999998,"gunningFogIndex":0.8,"smogIndex":3.0,"colemanLiauIndex":4.539999999999996}]},{"type":"NaturalLanguageTaggedUnit","id":"10001316-u2","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"{\n  "},{"type":"LocalVariableDeclarationStatementNode","modifiers":[],"declarators":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"line","comments":[]},"arrayDepth":[],"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"value","comments":[]},"arrayDepth":[],"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}}],"comments":[]},"labels":[],"comments":[]}]},"rawText":"{\n  int line, value;","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"{\n  int line, value;"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"line":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[{"type":"PrimitiveTypeNode","name":"int","comments":[]}]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"line","comments":[]},"arrayDepth":[],"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"value","comments":[]},"arrayDepth":[],"varType":{"type":"PrimitiveTypeNode","name":"int","comments":[]}}]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"line","comments":[]},{"type":"IdentifierNode","name":"value","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":90.99000000000002,"fleshKincaidGradeLevel":1.3133333333333361,"automatedReadingIndex":-1.0899999999999999,"gunningFogIndex":1.2000000000000002,"smogIndex":3.0,"colemanLiauIndex":-2.240000000000002}]},{"type":"NaturalLanguageTaggedUnit","id":"10001316-u3","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"}"}]},"rawText":"}","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"}"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":121.2,"fleshKincaidGradeLevel":-3.4,"automatedReadingIndex":-16.1,"gunningFogIndex":0.4,"smogIndex":3.0,"colemanLiauIndex":-39.8}]},{"type":"NaturalLanguageTaggedUnit","id":"10001316-u4","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"You check value field and if it fits your check, return line. Hope it helps :)"}]},"rawText":"You check value field and if it fits your check, return line. Hope it helps :)","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"You check value field and if it fits your check, return line. Hope it helps :)"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"field":1,"line":1,"fit":1,"help":1,"check":2,"hope":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":97.7025,"fleshKincaidGradeLevel":1.495000000000001,"automatedReadingIndex":0.8460000000000001,"gunningFogIndex":3.0,"smogIndex":3.0,"colemanLiauIndex":3.367333333333331}]}]},{"type":"StackOverflowAnswer","id":10001352,"questionId":10001186,"comments":[],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","score":0,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":1127098,"displayName":"CollinJSimpson","reputation":1020},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001352-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"You can accomplish the search without doing much \"programming\". Write a query to do it for you:"}]},"rawText":"You can accomplish the search without doing much \"programming\". Write a query to do it for you:","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"You can accomplish the search without doing much \"programming\". Write a query to do it for you:"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"program":1,"queri":1,"accomplish":1,"write":1,"search":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":78.77220588235296,"fleshKincaidGradeLevel":4.383823529411767,"automatedReadingIndex":3.5994117647058843,"gunningFogIndex":3.4000000000000004,"smogIndex":3.0,"colemanLiauIndex":6.655882352941173}]},{"type":"NaturalLanguageTaggedUnit","id":"10001352-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"String query = \"SELECT * FROM "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"numberLotto","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":" WHERE number = \" + "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"winningNumber","comments":[]}],"comments":[]}]},"rawText":"String query = \"SELECT * FROM numberLotto WHERE number = \" + winningNumber","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"String query = \"SELECT * FROM numberLotto WHERE number = \" + winningNumber"}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"number":3,"win":1,"lotto":1,"select":1,"queri":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"numberLotto","comments":[]},{"type":"IdentifierNode","name":"winningNumber","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":61.24000000000001,"fleshKincaidGradeLevel":6.705000000000002,"automatedReadingIndex":15.54,"gunningFogIndex":3.2,"smogIndex":3.0,"colemanLiauIndex":21.679999999999996}]},{"type":"NaturalLanguageTaggedUnit","id":"10001352-u2","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"The above assumes that your lottery numbers are stored in a field labeled \"number\". You may also use AND or OR clauses to search for multiple matches."}]},"rawText":"The above assumes that your lottery numbers are stored in a field labeled \"number\". You may also use AND or OR clauses to search for multiple matches.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"The above assumes that your lottery numbers are stored in a field labeled "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"\"number\""}]},{"type":"XmlTextNode","contents":". You may also use "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"AND"}]},{"type":"XmlTextNode","contents":" or "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"OR"}]},{"type":"XmlTextNode","contents":" clauses to search for multiple matches."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"number":2,"assum":1,"claus":1,"field":1,"label":1,"lotteri":1,"store":1,"match":1,"multipl":1,"search":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":70.93250000000003,"fleshKincaidGradeLevel":6.719444444444445,"automatedReadingIndex":6.253333333333334,"gunningFogIndex":5.4,"smogIndex":3.0,"colemanLiauIndex":8.155555555555555}]}]}]}