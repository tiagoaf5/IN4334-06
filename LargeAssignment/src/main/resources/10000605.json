{"type":"StackOverflowArtifact","question":{"type":"StackOverflowQuestion","id":10000605,"title":"Designing a DAO model for an existing project","comments":[{"type":"StackOverflowComment","id":12783222,"postId":10000605,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":928711,"displayName":"Guillaume Polet","reputation":35397},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000605-c12783222-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"In OO, DAO usually returns an object or a collection of that object and the DAO is linked to it. Then you navigate the relationships to get values from related objects. But you are free to do what seems the most logical. As long as the DAO layer encapsulate the technical mean used to access the data (an excel file, a Database through Hibernate, a DB through JDBC)"}]},"rawText":"In OO, DAO usually returns an object or a collection of that object and the DAO is linked to it. Then you navigate the relationships to get values from related objects. But you are free to do what seems the most logical. As long as the DAO layer encapsulate the technical mean used to access the data (an excel file, a Database through Hibernate, a DB through JDBC)","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"In OO, DAO usually returns an object or a collection of that object and the DAO is linked to it. Then you navigate the relationships to get values from related objects. But you are free to do what seems the most logical. As long as the DAO layer encapsulate the technical mean used to access the data (an excel file, a Database through Hibernate, a DB through JDBC)"}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"dao":3,"relat":1,"return":1,"hibern":1,"jdbc":1,"data":1,"logic":1,"object":3,"excel":1,"layer":1,"relationship":1,"link":1,"valu":1,"file":1,"technic":1,"databas":1,"collect":1,"navig":1,"encapsul":1,"free":1,"access":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":67.65647058823532,"fleshKincaidGradeLevel":8.045882352941177,"automatedReadingIndex":7.1567647058823525,"gunningFogIndex":7.976470588235294,"smogIndex":6.872983346207417,"colemanLiauIndex":7.554411764705879}]}]}],"tags":["java","dao"],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","score":3,"viewCount":439,"owner":{"type":"StackOverflowUser","id":86798,"displayName":"Mr Gravity","reputation":88},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000605-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Most of the DAO examples I've seen consist of simple queries only involving one table."}]},"rawText":"Most of the DAO examples I've seen consist of simple queries only involving one table.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Most of the DAO examples I've seen consist of simple queries only involving one table."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"involv":1,"simpl":1,"dao":1,"exampl":1,"tabl":1,"consist":1,"queri":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":68.9825,"fleshKincaidGradeLevel":7.612500000000001,"automatedReadingIndex":7.470625000000002,"gunningFogIndex":6.4,"smogIndex":3.0,"colemanLiauIndex":8.461875}]},{"type":"NaturalLanguageTaggedUnit","id":"10000605-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"I'm working on refactoring a project with no DAO that has lots of SQL queries where multiple tables are used. My question is how to best design the model for the DAO? In the examples below I could create a  object that covers each specific query. However I'm uncertain as to whether this is good practise or not. e.g. is it better to have one object representing each db table?"}]},"rawText":"I'm working on refactoring a project with no DAO that has lots of SQL queries where multiple tables are used. My question is how to best design the model for the DAO? In the examples below I could create a  object that covers each specific query. However I'm uncertain as to whether this is good practise or not. e.g. is it better to have one object representing each db table?","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"I'm working on refactoring a project with no DAO that has lots of SQL queries where multiple tables are used. My question is "},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"strong"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"how to best design the model for the DAO?"}]},{"type":"XmlTextNode","contents":" In the examples below I could create a  object that covers each specific query. However I'm uncertain as to whether this is good practise or not. e.g. is it better to have one object representing each db table?"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"question":1,"sql":1,"design":1,"dao":2,"model":1,"project":1,"good":1,"exampl":1,"uncertain":1,"work":1,"object":2,"tabl":2,"practis":1,"cover":1,"queri":2,"specif":1,"refactor":1,"lot":1,"creat":1,"multipl":1,"repres":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":73.54400000000001,"fleshKincaidGradeLevel":6.578777777777777,"automatedReadingIndex":5.525833333333335,"gunningFogIndex":6.315555555555556,"smogIndex":5.449489742783178,"colemanLiauIndex":6.821944444444444}]},{"type":"NaturalLanguageTaggedUnit","id":"10000605-u2","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"CustomerPaymentDAO to cover this query:\n"}]},"rawText":"CustomerPaymentDAO to cover this query:\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"CustomerPaymentDAO to cover this query:\n"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"custom":1,"dao":1,"payment":1,"cover":1,"queri":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":49.48000000000002,"fleshKincaidGradeLevel":7.600000000000001,"automatedReadingIndex":13.097999999999999,"gunningFogIndex":10.0,"smogIndex":8.477225575051662,"colemanLiauIndex":18.252}]},{"type":"CodeTaggedUnit","id":"10000605-u3","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"select\n    a.username,\n    "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"p","comments":[]},{"type":"IdentifierNode","name":"creation_date","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":",\n    p.amount,\n    "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"c","comments":[]},{"type":"IdentifierNode","name":"card_type","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"\nfrom\n    account      a,\n    payment      p,\n    "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"payment_type","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":" t,\n    "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"payment_card","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":" c\nwhere\n...\n"}]},"rawText":"select\n    a.username,\n    p.creation_date,\n    p.amount,\n    c.card_type\nfrom\n    account      a,\n    payment      p,\n    payment_type t,\n    payment_card c\nwhere\n...\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"select\n    a.username,\n    p.creation_date,\n    p.amount,\n    c.card_type\nfrom\n    account      a,\n    payment      p,\n    payment_type t,\n    payment_card c\nwhere\n...\n"}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"amount":1,"creation":1,"select":1,"payment":3,"date":1,"account":1,"type":2,"card":2,"usernam":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"p","comments":[]},{"type":"IdentifierNode","name":"creation_date","comments":[]},{"type":"IdentifierNode","name":"c","comments":[]},{"type":"IdentifierNode","name":"card_type","comments":[]},{"type":"IdentifierNode","name":"payment_type","comments":[]},{"type":"IdentifierNode","name":"payment_card","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]}]},{"type":"NaturalLanguageTaggedUnit","id":"10000605-u4","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"CustomerPurchaseDAO to cover this query:\n"}]},"rawText":"CustomerPurchaseDAO to cover this query:\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"CustomerPurchaseDAO to cover this query:\n"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"custom":1,"dao":1,"cover":1,"queri":1,"purchas":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":66.40000000000003,"fleshKincaidGradeLevel":5.240000000000002,"automatedReadingIndex":14.04,"gunningFogIndex":2.0,"smogIndex":3.0,"colemanLiauIndex":19.429999999999996}]},{"type":"CodeTaggedUnit","id":"10000605-u5","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"select\n    a.username,\n    i.name,\n    i.cost,\n    c.name,\n    v.value\nfrom\n    account      a,\n    item         i,\n    category     c,\n    voucher      v\nwhere\n...\n"}]},"rawText":"select\n    a.username,\n    i.name,\n    i.cost,\n    c.name,\n    v.value\nfrom\n    account      a,\n    item         i,\n    category     c,\n    voucher      v\nwhere\n...\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"select\n    a.username,\n    i.name,\n    i.cost,\n    c.name,\n    v.value\nfrom\n    account      a,\n    item         i,\n    category     c,\n    voucher      v\nwhere\n...\n"}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"voucher":1,"categori":1,"select":1,"cost":1,"account":1,"usernam":1,"item":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]}]}]},"answers":[{"type":"StackOverflowAnswer","id":10000863,"questionId":10000605,"comments":[],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","score":1,"isAccepted":true,"owner":{"type":"StackOverflowUser","id":871953,"displayName":"Eugene Retunsky","reputation":7669},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000863-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Generally speaking, there are two options: "}]},"rawText":"Generally speaking, there are two options: ","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Generally speaking, there are two options: "}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"general":1,"speak":1,"option":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":17.44500000000002,"fleshKincaidGradeLevel":12.316666666666666,"automatedReadingIndex":9.044999999999998,"gunningFogIndex":9.066666666666668,"smogIndex":8.477225575051662,"colemanLiauIndex":13.558333333333326}]},{"type":"NaturalLanguageTaggedUnit","id":"10000863-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Create an entity corresponding to each table and specify necessary relationships (many-to-many, many-to-one, one-to-one).In the database create a view for each query, and create entities on per view basis (in your example - two views + two entities). "}]},"rawText":"Create an entity corresponding to each table and specify necessary relationships (many-to-many, many-to-one, one-to-one).In the database create a view for each query, and create entities on per view basis (in your example - two views + two entities). ","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"ol"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"li"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"Create an entity corresponding to each table and specify necessary relationships (many-to-many, many-to-one, one-to-one)."}]}]},{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"li"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"In the database create a view for each query, and create entities on per view basis (in your example - two views + two entities). "}]}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"basi":1,"tabl":1,"relationship":1,"queri":1,"databas":1,"entiti":3,"creat":3,"view":3}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":34.86290540540543,"fleshKincaidGradeLevel":12.99256756756757,"automatedReadingIndex":13.53405405405406,"gunningFogIndex":9.562162162162162,"smogIndex":8.477225575051662,"colemanLiauIndex":14.734594594594594}]},{"type":"NaturalLanguageTaggedUnit","id":"10000863-u2","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"The second case is fine for read-only objects. If you need to create/update/delete entities then you need to create an entity corresponding to each single table. "}]},"rawText":"The second case is fine for read-only objects. If you need to create/update/delete entities then you need to create an entity corresponding to each single table. ","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"The second case is fine for read-only objects. If you need to create/update/delete entities then you need to create an entity corresponding to each single table. "}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"read":1,"singl":1,"delet":1,"updat":1,"object":1,"tabl":1,"entiti":2,"fine":1,"creat":2}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":43.963076923076954,"fleshKincaidGradeLevel":10.356923076923078,"automatedReadingIndex":9.344615384615388,"gunningFogIndex":8.276923076923078,"smogIndex":8.477225575051662,"colemanLiauIndex":12.248461538461537}]}]}]}