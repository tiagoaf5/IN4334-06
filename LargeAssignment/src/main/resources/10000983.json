{"type":"StackOverflowArtifact","question":{"type":"StackOverflowQuestion","id":10000983,"title":"Java for Android - how to create event listener for boolean variable","comments":[],"tags":["java","android","boolean","eventlistener"],"creationDate":"2012-04-03","lastActivityDate":"2012-10-21","score":0,"viewCount":4202,"owner":{"type":"StackOverflowUser","id":1311357,"displayName":"Lee Hall","reputation":5},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10000983-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"I am creating an android application using Java.  I have a boolean variable called \"movement\".  I want to create an event that triggers when the value of \"movement\" changes.  Any pointers in the right direction would be great.  Thank you"}]},"rawText":"I am creating an android application using Java.  I have a boolean variable called \"movement\".  I want to create an event that triggers when the value of \"movement\" changes.  Any pointers in the right direction would be great.  Thank you","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"I am creating an android application using Java.  I have a boolean variable called \"movement\".  I want to create an event that triggers when the value of \"movement\" changes.  Any pointers in the right direction would be great.  Thank you"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"pointer":1,"event":1,"direct":1,"applic":1,"movement":2,"variabl":1,"creat":2,"call":1,"great":1,"android":1,"trigger":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":76.04500000000002,"fleshKincaidGradeLevel":4.640000000000001,"automatedReadingIndex":4.4715000000000025,"gunningFogIndex":4.2,"smogIndex":5.449489742783178,"colemanLiauIndex":7.8385}]}]},"answers":[{"type":"StackOverflowAnswer","id":10001108,"questionId":10000983,"comments":[{"type":"StackOverflowComment","id":29078787,"postId":10001108,"creationDate":"2013-10-25","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":1137669,"displayName":"Karl Morrison","reputation":1483},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001108-c29078787-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"As the other two said, you missed setting the listener!"}]},"rawText":"As the other two said, you missed setting the listener!","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"As the other two said, you missed setting the listener!"}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"listen":1,"set":1,"miss":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":61.32500000000002,"fleshKincaidGradeLevel":7.190000000000001,"automatedReadingIndex":4.2940000000000005,"gunningFogIndex":4.0,"smogIndex":3.0,"colemanLiauIndex":7.115999999999996}]}]},{"type":"StackOverflowComment","id":12784178,"postId":10001108,"creationDate":"2012-04-03","score":3,"isEdited":false,"owner":{"type":"StackOverflowUser","id":535871,"displayName":"Ted Hopp","reputation":140382},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001108-c12784178-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"The only thing missing from this answer is to define a setter method for `"},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"mBoo","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"` that actually notifies the listener when the variable is set."}]},"rawText":"The only thing missing from this answer is to define a setter method for `mBoo` that actually notifies the listener when the variable is set.","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"The only thing missing from this answer is to define a setter method for `mBoo` that actually notifies the listener when the variable is set."}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"method":1,"set":1,"setter":1,"notifi":1,"thing":1,"boo":1,"miss":1,"listen":1,"answer":1,"defin":1,"variabl":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"mBoo","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":52.86800000000002,"fleshKincaidGradeLevel":12.096,"automatedReadingIndex":12.547599999999996,"gunningFogIndex":11.600000000000001,"smogIndex":8.477225575051662,"colemanLiauIndex":9.858399999999996}]}]},{"type":"StackOverflowComment","id":12784169,"postId":10001108,"creationDate":"2012-04-03","score":2,"isEdited":false,"owner":{"type":"StackOverflowUser","id":180538,"displayName":"WarrenFaith","reputation":35620},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001108-c12784169-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"Nice simple code snippet. It just missing the setter where the listener gets notified if one was set :)"}]},"rawText":"Nice simple code snippet. It just missing the setter where the listener gets notified if one was set :)","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"Nice simple code snippet. It just missing the setter where the listener gets notified if one was set :)"}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"simpl":1,"snippet":1,"set":1,"setter":1,"notifi":1,"nice":1,"miss":1,"code":1,"listen":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":70.80000000000003,"fleshKincaidGradeLevel":5.6200000000000045,"automatedReadingIndex":4.526666666666667,"gunningFogIndex":3.6,"smogIndex":3.0,"colemanLiauIndex":7.698888888888888}]}]}],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","score":4,"isAccepted":true,"owner":{"type":"StackOverflowUser","id":219159,"displayName":"Seva Alekseyev","reputation":35371},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001108-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"A variable is not alone, I presume. It resides as a member in a class - right? So the listener interface would be nested in that class, and the class would have a member variable for a listener, and a "},{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"setBooChangeListener","comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":" method. And on every change to the variable (it's not public, I hope) you'd call the listener, if any. That's pretty much it."}]},"rawText":"A variable is not alone, I presume. It resides as a member in a class - right? So the listener interface would be nested in that class, and the class would have a member variable for a listener, and a setBooChangeListener method. And on every change to the variable (it's not public, I hope) you'd call the listener, if any. That's pretty much it.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"A variable is not alone, I presume. It resides as a member in a class - right? So the listener interface would be nested in that class, and the class would have a member variable for a listener, and a setBooChangeListener method. And on every change to the variable (it's not public, I hope) you'd call the listener, if any. That's pretty much it."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"chang":2,"resid":1,"method":1,"nest":1,"set":1,"boo":1,"pretti":1,"listen":4,"member":2,"hope":1,"presum":1,"variabl":3,"call":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"setBooChangeListener","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":80.63700000000003,"fleshKincaidGradeLevel":5.291333333333334,"automatedReadingIndex":4.509545454545453,"gunningFogIndex":5.28,"smogIndex":3.0,"colemanLiauIndex":6.111969696969695}]},{"type":"CodeTaggedUnit","id":"10001108-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"ClassDeclarationNode","modifiers":[],"identifier":{"type":"IdentifierNode","name":"C","comments":[]},"body":{"type":"ClassBodyNode","declarations":[{"type":"FieldDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"private","comments":[]}],"variables":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"mBoo","comments":[]},"arrayDepth":[],"varType":{"type":"PrimitiveTypeNode","name":"boolean","comments":[]}}],"comments":[]},"comments":[{"text":"//that's our variable\n"}]},{"type":"InterfaceDeclarationNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]}],"identifier":{"type":"IdentifierNode","name":"BooChangeListener","comments":[]},"body":{"type":"ClassBodyNode","declarations":[{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]}],"returnType":{"type":"PrimitiveTypeNode","name":"void","comments":[]},"identifier":{"type":"IdentifierNode","name":"OnBooChange","comments":[]},"parameters":{"type":"FormalParametersNode","parameters":{"type":"FormalParameterDeclsNode","formalParameters":[{"type":"FormalParameterDeclNode","modifiers":[],"parameterType":{"type":"PrimitiveTypeNode","name":"boolean","comments":[]},"variableDeclarator":{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"Boo","comments":[]},"arrayDepth":[]},"isVariadic":false,"comments":[]}],"comments":[]},"comments":[]},"arrayReturnType":[],"comments":[]}],"comments":[]},"labels":[],"comments":[]},{"type":"FieldDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"private","comments":[]}],"variables":{"type":"VariableDeclaratorsNode","declarators":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"mOnChange","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"NullLiteralNode"},"comments":[]}},"comments":[]},"varType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"BooChangeListener","comments":[]},"comments":[]}],"comments":[]}}],"comments":[]},"comments":[]},{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]}],"returnType":{"type":"PrimitiveTypeNode","name":"void","comments":[]},"identifier":{"type":"IdentifierNode","name":"setOnBooChangeListener","comments":[]},"parameters":{"type":"FormalParametersNode","parameters":{"type":"FormalParameterDeclsNode","formalParameters":[{"type":"FormalParameterDeclNode","modifiers":[],"parameterType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"BooChangeListener","comments":[]},"comments":[]}],"comments":[]},"variableDeclarator":{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"bcl","comments":[]},"arrayDepth":[]},"isVariadic":false,"comments":[]}],"comments":[]},"comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[{"type":"ExpressionStatement","expression":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"=","comments":[]},"left":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"mOnChange","comments":[]}],"comments":[]},"right":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"bcl","comments":[]}],"comments":[]},"comments":[]},"labels":[]}],"labels":[],"comments":[]},"comments":[]}],"comments":[]},"labels":[],"comments":[]}]},"rawText":"class C\n{\n    private boolean mBoo; //that's our variable\n\n    public interface BooChangeListener\n    {\n        public void OnBooChange(boolean Boo);\n    }\n\n    private BooChangeListener mOnChange = null;\n\n    public void setOnBooChangeListener(BooChangeListener bcl)\n    {\n        mOnChange = bcl;\n    }\n}\n","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"pre"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"code"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"class C\n{\n    private boolean mBoo; //that's our variable\n\n    public interface BooChangeListener\n    {\n        public void OnBooChange(boolean Boo);\n    }\n\n    private BooChangeListener mOnChange = null;\n\n    public void setOnBooChangeListener(BooChangeListener bcl)\n    {\n        mOnChange = bcl;\n    }\n}\n"}]}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"chang":7,"set":1,"boo":7,"listen":4,"bcl":2,"variabl":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"BooChangeListener","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[{"type":"PrimitiveTypeNode","name":"boolean","comments":[]},{"type":"PrimitiveTypeNode","name":"void","comments":[]}]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"mBoo","comments":[]},"arrayDepth":[],"varType":{"type":"PrimitiveTypeNode","name":"boolean","comments":[]}},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"Boo","comments":[]},"arrayDepth":[]},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"mOnChange","comments":[]},"arrayDepth":[],"assignment":{"type":"VariableAssignmentNode","variableAssignment":{"type":"VariableExpressionInitNode","expression":{"type":"LiteralNode","node":{"type":"NullLiteralNode"},"comments":[]}},"comments":[]},"varType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"BooChangeListener","comments":[]},"comments":[]}],"comments":[]}},{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"bcl","comments":[]},"arrayDepth":[]}]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"C","comments":[]},{"type":"IdentifierNode","name":"mBoo","comments":[]},{"type":"IdentifierNode","name":"BooChangeListener","comments":[]},{"type":"IdentifierNode","name":"OnBooChange","comments":[]},{"type":"IdentifierNode","name":"Boo","comments":[]},{"type":"IdentifierNode","name":"mOnChange","comments":[]},{"type":"IdentifierNode","name":"BooChangeListener","comments":[]},{"type":"IdentifierNode","name":"setOnBooChangeListener","comments":[]},{"type":"IdentifierNode","name":"BooChangeListener","comments":[]},{"type":"IdentifierNode","name":"bcl","comments":[]},{"type":"IdentifierNode","name":"mOnChange","comments":[]},{"type":"IdentifierNode","name":"bcl","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]}],"returnType":{"type":"PrimitiveTypeNode","name":"void","comments":[]},"identifier":{"type":"IdentifierNode","name":"OnBooChange","comments":[]},"parameters":{"type":"FormalParametersNode","parameters":{"type":"FormalParameterDeclsNode","formalParameters":[{"type":"FormalParameterDeclNode","modifiers":[],"parameterType":{"type":"PrimitiveTypeNode","name":"boolean","comments":[]},"variableDeclarator":{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"Boo","comments":[]},"arrayDepth":[]},"isVariadic":false,"comments":[]}],"comments":[]},"comments":[]},"arrayReturnType":[],"comments":[]},{"type":"MethodDeclaratorNode","modifiers":[{"type":"KeywordModifierNode","value":"public","comments":[]}],"returnType":{"type":"PrimitiveTypeNode","name":"void","comments":[]},"identifier":{"type":"IdentifierNode","name":"setOnBooChangeListener","comments":[]},"parameters":{"type":"FormalParametersNode","parameters":{"type":"FormalParameterDeclsNode","formalParameters":[{"type":"FormalParameterDeclNode","modifiers":[],"parameterType":{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"BooChangeListener","comments":[]},"comments":[]}],"comments":[]},"variableDeclarator":{"type":"VariableDeclaratorNode","identifier":{"type":"IdentifierNode","name":"bcl","comments":[]},"arrayDepth":[]},"isVariadic":false,"comments":[]}],"comments":[]},"comments":[]},"arrayReturnType":[],"body":{"type":"BlockNode","statements":[{"type":"ExpressionStatement","expression":{"type":"BinaryExpressionNode","operator":{"type":"OperatorNode","symbol":"=","comments":[]},"left":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"mOnChange","comments":[]}],"comments":[]},"right":{"type":"QualifiedIdentifierNode","identifiers":[{"type":"IdentifierNode","name":"bcl","comments":[]}],"comments":[]},"comments":[]},"labels":[]}],"labels":[],"comments":[]},"comments":[]}]}]},{"type":"NaturalLanguageTaggedUnit","id":"10001108-u2","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"There's no way to have the system (Java) watch the variable and automatically fire a listener whenever it's changed. There's no magic."}]},"rawText":"There's no way to have the system (Java) watch the variable and automatically fire a listener whenever it's changed. There's no magic.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"There's no way to have the system (Java) watch the variable and automatically fire a listener whenever it's changed. There's no magic."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"chang":1,"system":1,"fire":1,"watch":1,"automat":1,"listen":1,"magic":1,"variabl":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":65.55550000000002,"fleshKincaidGradeLevel":7.221,"automatedReadingIndex":5.355600000000003,"gunningFogIndex":6.6000000000000005,"smogIndex":6.872983346207417,"colemanLiauIndex":7.4803999999999995}]}]},{"type":"StackOverflowAnswer","id":10001251,"questionId":10000983,"comments":[{"type":"StackOverflowComment","id":12784614,"postId":10001251,"creationDate":"2012-04-03","score":0,"isEdited":false,"owner":{"type":"StackOverflowUser","id":219159,"displayName":"Seva Alekseyev","reputation":35371},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001251-c12784614-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"I don't think beans are currently supported on Android. Also, "},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"PropertyChangeListener","comments":[]},"comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"is type-agnostic."}]},"rawText":"I don't think beans are currently supported on Android. Also, PropertyChangeListener is type-agnostic.","source":{"type":"XmlSourceInfo","node":{"type":"XmlTextNode","contents":"I don't think beans are currently supported on Android. Also, PropertyChangeListener is type-agnostic."}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"chang":1,"properti":1,"support":1,"agnost":1,"listen":1,"bean":1,"type":1,"android":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"PropertyChangeListener","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"PropertyChangeListener","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":30.53000000000003,"fleshKincaidGradeLevel":10.740000000000002,"automatedReadingIndex":11.339285714285715,"gunningFogIndex":8.514285714285714,"smogIndex":8.477225575051662,"colemanLiauIndex":16.516428571428566}]}]}],"creationDate":"2012-04-03","lastActivityDate":"2012-04-03","score":0,"isAccepted":false,"owner":{"type":"StackOverflowUser","id":1288802,"displayName":"user1288802","reputation":80},"informationUnits":[{"type":"NaturalLanguageTaggedUnit","id":"10001251-u0","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"I wish I could add this as a comment...I agree with the most part with Seva above, however, consider making the class a bean and implementing the "},{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"PropertyChangeListener","comments":[]},"comments":[]}],"comments":[]},{"type":"TextFragmentNode","text":"interface:"}]},"rawText":"I wish I could add this as a comment...I agree with the most part with Seva above, however, consider making the class a bean and implementing the PropertyChangeListener interface:","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"I wish I could add this as a comment...I agree with the most part with Seva above, however, consider making the class a bean and implementing the PropertyChangeListener interface:"}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"chang":1,"properti":1,"seva":1,"listen":1,"bean":1,"comment":1,"implement":1,"make":1,"agre":1,"part":1,"add":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[{"type":"ReferenceTypeNode","ids":[{"type":"ParameterizedTypeNode","identifier":{"type":"IdentifierNode","name":"PropertyChangeListener","comments":[]},"comments":[]}],"comments":[]}],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[{"type":"IdentifierNode","name":"PropertyChangeListener","comments":[]}]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":43.84500000000003,"fleshKincaidGradeLevel":14.596666666666668,"automatedReadingIndex":16.335,"gunningFogIndex":14.666666666666666,"smogIndex":10.745966692414834,"colemanLiauIndex":11.66833333333333}]},{"type":"NaturalLanguageTaggedUnit","id":"10001251-u1","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"http:"},{"type":"SeparatorNode","symbol":"","comments":[{"text":"//docs.oracle.com/javase/1.4.2/docs/api/java/beans/PropertyChangeListener.html \n"}]}]},"rawText":"http://docs.oracle.com/javase/1.4.2/docs/api/java/beans/PropertyChangeListener.html ","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"a"},"attributes":[{"type":"XmlAttributeNode","name":{"type":"XmlNameNode","value":"a"},"value":{"type":"StringLiteralNode","valueRep":"http://docs.oracle.com/javase/1.4.2/docs/api/java/beans/PropertyChangeListener.html"}},{"type":"XmlAttributeNode","name":{"type":"XmlNameNode","value":"a"},"value":{"type":"StringLiteralNode","valueRep":"nofollow"}}],"elements":[{"type":"XmlTextNode","contents":"http://docs.oracle.com/javase/1.4.2/docs/api/java/beans/PropertyChangeListener.html"}]},{"type":"XmlTextNode","contents":" "}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"chang":1,"properti":1,"oracl":1,"doc":2,"listen":1,"bean":1,"javas":1,"api":1,"html":1,"http":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":-1401.58,"fleshKincaidGradeLevel":209.0,"automatedReadingIndex":370.0,"gunningFogIndex":40.400000000000006,"smogIndex":8.477225575051662,"colemanLiauIndex":443.06999999999994}]},{"type":"NaturalLanguageTaggedUnit","id":"10001251-u2","astNode":{"type":"HASTNodeSequence","fragments":[{"type":"TextFragmentNode","text":"bean properties can indeed be bound and watched in this manner. In javafx 2.0 Oracle added some really advanced mechanisms for doing this between properties and UI elements and I really hope this can be branched into the core API and somehow become available for Android devs. If JavaFX 2.0 is too late to the game we may get some of the more modern paradigm shifts in the core at least so situations like this can be implemented in a simple and rational way."}]},"rawText":"bean properties can indeed be bound and watched in this manner. In javafx 2.0 Oracle added some really advanced mechanisms for doing this between properties and UI elements and I really hope this can be branched into the core API and somehow become available for Android devs. If JavaFX 2.0 is too late to the game we may get some of the more modern paradigm shifts in the core at least so situations like this can be implemented in a simple and rational way.","source":{"type":"XmlSourceInfo","node":{"type":"XmlComposedNode","name":{"type":"XmlNameNode","value":"p"},"attributes":[],"elements":[{"type":"XmlTextNode","contents":"bean properties can indeed be bound and watched in this manner. In javafx 2.0 Oracle added some really advanced mechanisms for doing this between properties and UI elements and I really hope this can be branched into the core API and somehow become available for Android devs. If JavaFX 2.0 is too late to the game we may get some of the more modern paradigm shifts in the core at least so situations like this can be implemented in a simple and rational way."}]}},"metaInformation":[{"type":"NaturalLanguageMetaInformation","tfMap":{"properti":2,"manner":1,"advanc":1,"simpl":1,"late":1,"branch":1,"watch":1,"shift":1,"javafx":1,"oracl":1,"element":1,"modern":1,"ration":1,"situat":1,"bound":1,"bean":1,"dev":1,"hope":1,"paradigm":1,"mechan":1,"implement":1,"ad":1,"api":1,"core":2,"game":1,"android":1}},{"type":"CodeTypesMetaInformation","qualifiedTypes":[],"simpleTypes":[],"basicTypes":[]},{"type":"CodeInvocationMetaInformation","invocations":[]},{"type":"CodeVariablesMetaInformation","variables":[]},{"type":"CodeIdentifiersMetaInformation","identifiers":[]},{"type":"CodeMethodDeclaratorsMetaInformation","declarators":[]},{"type":"TextReadabilityMetaInformation","fleshReadingEaseScore":60.579285714285746,"fleshKincaidGradeLevel":11.765714285714285,"automatedReadingIndex":13.484642857142859,"gunningFogIndex":12.152380952380952,"smogIndex":7.47213595499958,"colemanLiauIndex":9.282976190476187}]}]}]}